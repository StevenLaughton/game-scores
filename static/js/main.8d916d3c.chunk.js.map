{"version":3,"sources":["Components/player-card.jsx","Components/add-player-card.jsx","Components/score-table.jsx","Models/player.model.js","Models/scientific-structure-types.enum.js","Helpers/array.helper.js","Services/score.service.js","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Cards/commerce.cards.js","Cards/material.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","player","useState","points","setPoints","open","setOpen","useEffect","board","values","reduce","acc","val","bg","border","className","Header","icon","faUserCircle","onClick","name","slotLeft","slotRight","Collapse","in","Body","children","Footer","AddPlayerCard","faPlusCircle","size","ScoreTable","Table","responsive","striped","get","index","cards","map","card","item","quantity","Accordion","keys","key","Item","eventKey","Badge","pill","Player","this","scientificStructureTypes","cog","compass","tablet","sum","arr","calculateScientificStructures","byType","Counter","type","Object","scienceType","Math","pow","min","sumOfCardActionTimesQuantity","action","scoreService","players","forEach","boardItem","floor","set","calculateScore","iter","x","add","multiplier","Map","Silver","Gold","BattleWins","BattleLosses","GizaPhaseOne","GizaPhaseTwo","GizaPhaseThree","Pawnshop","Baths","Altar","Theater","Scriptorium","Workshop","Apothecary","Marketplace","Vineyard","LumberYard","Error","boardService","boardMap","getBoard","QuantitySelector","max","Number","MAX_VALUE","value","setValue","setQuantityInternal","onChange","readOnly","CardBuilder","setBoard","Modal","show","onHide","handleClose","closeButton","Title","boardItemKey","boardIndex","ListGroup","variant","cardIndex","state","update","Button","handleSave","SevenWonders","addPlayer","playerName","prompt","setState","$push","updatePlayer","statePlayers","slice","removePlayer","$splice","calculateScores","openModal","playerIndex","modalOpen","modalPlayer","closeModal","saveModal","Container","Row","Col","xs","sm","faPlus","CloseButton","updateHandler","bind","md","React","Component","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","Toggle","aria-controls","id","Nav","route","Link","as","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAKe,SAASA,EAAWC,GAC/B,IAAMC,EAASD,EAAMC,OADiB,EAEVC,mBAAS,GAFC,mBAE/BC,EAF+B,KAEvBC,EAFuB,OAGdF,oBAAS,GAHK,mBAG/BG,EAH+B,KAGzBC,EAHyB,KAWtC,OANAC,qBAAU,WACFN,EAAOO,OACPJ,EAAU,YAAIH,EAAOO,MAAMC,UAAUC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIT,SAAQ,OAKhF,eAAC,IAAD,CAAMU,GAAG,QAAQC,OAAO,QAAQC,UAAU,WAA1C,UACI,cAAC,IAAKC,OAAN,UACI,sBAAKD,UAAU,4BAAf,UACI,cAAC,IAAD,CAAiBE,KAAMC,eAAcH,UAAU,OAAOI,QAAS,kBAAMb,GAASD,MAC9E,+BAAOJ,EAAOmB,OACd,qBAAKL,UAAU,OAAf,gBAAuBf,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAOqB,WAC9B,qBAAKN,UAAU,gBACf,qBAAKA,UAAU,OAAf,gBAAuBf,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAOsB,iBAGtC,cAACC,EAAA,EAAD,CAAUC,GAAInB,EAAd,SACI,cAAC,IAAKoB,KAAN,UACKzB,EAAM0B,aAGf,eAAC,IAAKC,OAAN,CAAaZ,UAAU,2BAAvB,oBACYZ,Q,YC5BT,SAASyB,EAAc5B,GAElC,OACI,cAAC,IAAD,CACImB,QAASnB,EAAMmB,QACfN,GAAG,YACHC,OAAO,YACPC,UAAU,uBAJd,SAKI,cAAC,IAAKU,KAAN,UACI,cAAC,IAAD,CAAiBR,KAAMY,IAAcC,KAAK,W,6CCX3C,SAASC,EAAW/B,GAE/B,IAAMyB,EAAO,SAACzB,GACV,OACI,eAACgC,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAAzB,UACI,gCACA,+BACI,sCACA,+CAGJ,gCAEIlC,EAAMQ,MAAM2B,IAAInC,EAAMoC,OAAOC,MAAMC,KAAI,SAACC,EAAwBH,GAC5D,OACI,+BACI,6BAAKG,EAAKC,KAAKpB,OACf,6BAAKmB,EAAKE,aAFLL,YAYjC,OACI,cAACM,EAAA,EAAD,UAEQ,YAAI1C,EAAMQ,MAAMmC,QAAQL,KAAI,SAACM,EAAKR,GAC9B,OACI,eAACM,EAAA,EAAUG,KAAX,CAAgBC,SAAUV,EAA1B,UACI,eAACM,EAAA,EAAU1B,OAAX,WACI,eAAC+B,EAAA,EAAD,CAAOlC,GAAG,UAAUE,UAAU,OAAOiC,MAAI,EAAzC,cAA4ChD,EAAMQ,MAAM2B,IAAIS,GAAKzC,UAChEyC,KAEL,cAACF,EAAA,EAAUjB,KAAX,UACI,cAACA,EAAD,CAAMW,MAAOQ,EAAKpC,MAAOR,EAAMQ,YAND4B,Q,ICjCzCa,EAIjB,WAAY7B,GAAe,oBACvB8B,KAAK9B,KAAOA,G,gBCPP+B,EAA2B,CACpCC,IAAK,MACLC,QAAS,UACTC,OAAQ,UCHCC,EAAM,SAACC,GAAD,OAAaA,EAAI9C,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,IAAK,ICsC9D6C,EAAgC,SAACpB,GACnC,IAAMqB,EAAS,IAAIC,EAAQtB,GAAO,SAAAE,GAAI,OAAIA,EAAKC,KAAKoB,QAKpD,OAJ8BL,EAAIM,OAAOpD,OAAO0C,GAA0Bb,KAAI,SAAAwB,GAAW,OAAIC,KAAKC,IAAIN,EAAOvB,IAAI2B,GAAc,OAEvD,EAAhDC,KAAKE,IAAL,MAAAF,KAAI,YAAQ1B,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKE,eAMzDyB,EAA+B,SAAC7B,GAAD,IAA4BrC,EAA5B,uDAAoC,KAApC,OACjCuD,EAAIlB,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAK2B,OAAOnE,GAASuC,EAAKE,cAE5C2B,EACE,SAACC,GAAD,OA/CQ,SAACrE,GACpB,IAAMqE,EAAUrE,EA4BhB,OA1BAqE,EAAQC,SAAQ,SAACrE,EAAQmC,GACrBnC,EAAOO,OAASP,EAAOO,MAAM8D,SAAQ,SAACC,EAAW3B,GAC7C,IAAIzC,EAAS,EACb,OAAQyC,GACJ,IAAK,WACL,IAAK,QACDzC,EAAS+D,EAA6BK,EAAUlC,OAChD,MACJ,IAAK,QACDlC,EAAS4D,KAAKS,MAAMN,EAA6BK,EAAUlC,OAAS,GACpE,MACJ,IAAK,UACDlC,EAASsD,EAA8Bc,EAAUlC,OACjD,MACJ,IAAK,WACDlC,EAAS+D,EAA6BK,EAAUlC,MAAO,CAACgC,QAASA,EAASjC,MAAOA,IAIzFnC,EAAOO,MAAMiE,IAAI7B,EAAK,CAClBzC,OAAQA,EACRkC,MAAOkC,EAAUlC,cAKtBgC,EAkB2BK,CAAeL,IAG/CV,E,kDACF,WAAYgB,GAAmB,IAAD,EAAZ/B,EAAY,uDAAN,KAAM,qBAC1B,gBACKA,IAAMA,GAAQ,SAAAgC,GAAC,OAAIA,GAFE,oBAGZD,GAHY,IAG1B,2BAAoB,CAAC,IAAZC,EAAW,QAChB,EAAKC,IAAID,EAAGA,EAAEnC,WAJQ,uC,uCAQ9B,SAAImC,EAAGE,GACHF,EAAI1B,KAAKN,IAAIgC,GACb1B,KAAKuB,IAAIG,IAAM1B,KAAKf,IAAIyC,IAAM,GAAM,GAAKE,O,eAX3BC,M,yBCrDTC,EAAb,iDACI5D,KAAO,SADX,0CAGI,WACI,OAAO,MAJf,KAQa6D,EAAb,iDACI7D,KAAO,OADX,0CAGI,WACI,OAAO,MAJf,KCRa8D,EAAb,iDACI9D,KAAO,cADX,0CAGI,WACI,OAAO,MAJf,KAQa+D,EAAb,iDACI/D,KAAO,gBADX,0CAGI,WACI,OAAQ,MAJhB,KCRagE,EAAb,iDACIhE,KAAO,UADX,0CAGI,WACI,OAAO,MAJf,KAQaiE,EAAb,iDACIjE,KAAO,UADX,0CAGI,WACI,OAAO,MAJf,KAQakE,GAAb,iDACIlE,KAAO,UADX,0CAGI,WACI,OAAO,MAJf,KChBamE,GAAb,iDACInE,KAAO,WADX,0CAGI,WACI,OAAO,MAJf,KAQaoE,GAAb,iDACIpE,KAAO,WADX,0CAGI,WACI,OAAO,MAJf,KAQaqE,GAAb,iDACIrE,KAAO,QADX,0CAGI,WACI,OAAO,MAJf,KAQasE,GAAb,iDACItE,KAAO,UADX,0CAGI,WACI,OAAO,MAJf,KCvBauE,GAAb,iDACIvE,KAAO,cADX,KAEIwC,KAAOT,EAAyBG,OAFpC,0CAII,WACI,OAAO,MALf,KASasC,GAAb,iDACIxE,KAAO,WADX,KAEIwC,KAAOT,EAAyBC,IAFpC,0CAII,WACI,OAAO,MALf,KASayC,GAAb,iDACIzE,KAAO,aADX,KAEIwC,KAAOT,EAAyBE,QAFpC,0CAII,WACI,OAAO,MALf,KCnBayC,GAAb,iDACI1E,KAAO,cADX,0CAGI,WACI,OAAO,MAJf,KAQa2E,GAAb,iDACI3E,KAAO,WADX,0CAGI,WACI,OAAO,MAJf,KCNa4E,GAAb,sCACI5E,KAAO,cADX,KAGI+C,OAAS,WACL,MAAM,IAAI8B,MANG,0CCoHRC,GACJ,kBA/GQ,WACb,IAAMC,EAAW,IAAIpB,IA0GrB,OAzGAoB,EAAS1B,IAAI,WAAY,CACrBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAI0C,EACVzC,SAAU,GAEd,CACID,KAAM,IAAI2C,EACV1C,SAAU,MAItB0D,EAAS1B,IAAI,QAAS,CAClBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAIwC,EACVvC,SAAU,GAEd,CACID,KAAM,IAAIyC,EACVxC,SAAU,MAItB0D,EAAS1B,IAAI,UAAW,CACpBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAI4C,EACV3C,SAAU,GAEd,CACID,KAAM,IAAI6C,EACV5C,SAAU,GAEd,CACID,KAAM,IAAI8C,GACV7C,SAAU,MAItB0D,EAAS1B,IAAI,QAAS,CAClBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAI+C,GACV9C,SAAU,GAEd,CACID,KAAM,IAAIgD,GACV/C,SAAU,GAEd,CACID,KAAM,IAAIiD,GACVhD,SAAU,GAEd,CACID,KAAM,IAAIkD,GACVjD,SAAU,MAKtB0D,EAAS1B,IAAI,UAAW,CACpBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAImD,GACVlD,SAAU,GAEd,CACID,KAAM,IAAIoD,GACVnD,SAAU,GAEd,CACID,KAAM,IAAIqD,GACVpD,SAAU,MAItB0D,EAAS1B,IAAI,WAAY,CACrBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAIuD,GACVtD,SAAU,GAEd,CACID,KAAM,IAAIsD,GACVrD,SAAU,MAItB0D,EAAS1B,IAAI,WAAY,CACrBtE,OAAQ,EACRkC,MAAO,CACH,CACIG,KAAM,IAAIwD,GACVvD,SAAU,MAKf0D,EAIIC,ICrHA,SAASC,GAAiBrG,GAAQ,IAAD,IACtCiE,EAAG,iBAAGjE,QAAH,IAAGA,OAAH,EAAGA,EAAOiE,WAAV,QAAiB,EACpBqC,EAAG,iBAAGtG,QAAH,IAAGA,OAAH,EAAGA,EAAOsG,WAAV,QAAiBC,OAAOC,UAFW,EAIlBtG,mBAASF,EAAMyG,OAJG,mBAIrCA,EAJqC,KAI9BC,EAJ8B,KAmBtCC,EAAsB,SAACF,GACzBzG,EAAM4G,SAASH,GACfC,EAASD,IAGb,OACI,sBAAK1F,UAAU,iBAAf,UACI,wBAAQA,UAAU,0DACV6C,KAAK,SACLzC,QAtBE,WACVsF,EAAQxC,GACR0C,EAAoBF,EAAQ,IAkB5B,oBAKA,uBAAO1F,UAAU,yBAAyB6C,KAAK,OAAO6C,MAAOA,EAAOI,UAAQ,IAC5E,wBAAQ9F,UAAU,2DACV6C,KAAK,SACLzC,QAtBE,WACVsF,EAAQH,GACRK,EAAoBF,EAAQ,IAkB5B,uBC7BG,SAASK,GAAY9G,GAAQ,IAAD,IACbE,mBAAQ,UAACF,EAAMQ,aAAP,QAAgB0F,MADX,mBAChC1F,EADgC,KACzBuG,EADyB,KASvC,OACI,eAACC,EAAA,EAAD,CAAOC,KAAMjH,EAAMiH,KAAMC,OAAQlH,EAAMmH,YAAvC,UACI,cAACH,EAAA,EAAMhG,OAAP,CAAcoG,aAAW,EAAzB,SACI,cAACJ,EAAA,EAAMK,MAAP,8BAEJ,cAACL,EAAA,EAAMvF,KAAP,UACI,cAACiB,EAAA,EAAD,UACK,YAAIlC,EAAMmC,QAAQL,KAAI,SAACgF,EAAcC,GAAf,OACf,eAAC7E,EAAA,EAAUG,KAAX,CAAgBC,SAAUyE,EAA1B,UACI,cAAC7E,EAAA,EAAU1B,OAAX,UACKsG,IAEL,cAAC5E,EAAA,EAAUjB,KAAX,UACI,cAAC+F,EAAA,EAAD,CAAWC,QAAQ,QAAnB,SACKjH,EAAM2B,IAAImF,GAAcjF,MAAMC,KAAI,SAACC,EAAMmF,GAAP,OAC/B,eAACF,EAAA,EAAU3E,KAAX,CAAgC9B,UAAU,yBAA1C,UACI,qBAAKA,UAAU,sDAAf,SACKwB,EAAKC,KAAKpB,OAEf,qBAAKL,UAAU,oDAAf,SACI,cAACsF,GAAD,CAAkBI,MAAOlE,EAAKE,SACZwB,IAAK,EACL2C,SAAU,SAAAnE,GAAQ,OA5BrE,SAACgE,EAAOa,EAAcI,GACjC,IAAMpF,EAAM9B,EAAM2B,IAAImF,GACtBhF,EAAID,MAAMqF,GAAWjF,SAAWgE,EAChCM,GAAS,SAAAY,GAAK,OAAI,IAAI5C,IAAI4C,GAAOlD,IAAI6C,EAAchF,MAyBiCsF,CAAOnF,EAAU6E,EAAcI,UAP1DA,YAPMH,UAyB3D,cAACP,EAAA,EAAMrF,OAAP,UACI,cAACkG,EAAA,EAAD,CAAQJ,QAAQ,UAAUtG,QAAS,kBAAOnB,EAAM8H,WAAWtH,IAA3D,+B,ICpCKuH,G,kDACjB,WAAY/H,GAAQ,IAAD,8BACf,cAAMA,IAYVgI,UAAY,WACR,IAAMC,EAAaC,OAAO,4BACtBD,GACA,EAAKE,UAAS,SAACR,GAAD,MAAY,CACtBtD,QAASuD,IAAOD,EAAMtD,QAAS,CAAC+D,MAAO,CAAC,IAAInF,EAAOgF,WAjB5C,EAsBnBI,aAAe,SAACpI,EAAQmC,GACpB,IAAMkG,EAAe,EAAKX,MAAMtD,QAAQkE,QACxCD,EAAalG,GAASnC,EACtB,EAAKkI,SAAS,CAAC9D,QAASiE,KAzBT,EA4BnBE,aAAe,SAACpG,GACZ,EAAK+F,UAAS,SAACR,GAAD,OAAWC,IAAOD,EAAO,CAACtD,QAAS,CAACoE,QAAS,CAAC,CAACrG,EAAO,WA7BrD,EAgCnBsG,gBAAkB,WACd,IAAMrE,EAAUD,EAAuB,EAAKuD,MAAMtD,QAAQkE,SAC1D,EAAKJ,SAAS,CAAC9D,QAASA,KAlCT,EAqCnBsE,UAAY,SAAC1I,EAAQ2I,GACjB,EAAKT,SAAS,CAACU,WAAW,EAAMC,YAAa7I,EAAQ2I,YAAaA,KAtCnD,EAyCnBG,WAAa,WACT,EAAKZ,SAAS,CAACU,WAAW,EAAOC,YAAa,QA1C/B,EA6CnBE,UAAY,SAACxI,GACT,IAAM4B,EAAQ,EAAKuF,MAAMiB,YACnB3I,EAAS,EAAK0H,MAAMtD,QAAQjC,GAClCnC,EAAOO,MAAQA,EACf,EAAK6H,aAAapI,EAAQmC,GAC1B,EAAK2G,cAhDL,EAAKpB,MAAQ,CACTtD,QAAS,CACL,IAAIpB,EAAO,UACX,IAAIA,EAAO,cAEf4F,WAAW,EACXC,YAAa,KACbF,YAAa,MATF,E,0CAqDnB,WAAU,IAAD,OACL,OACI,gCACI,oBAAI7H,UAAU,MAAd,uBACA,eAACkI,EAAA,EAAD,WACI,qBAAKlI,UAAU,eAAf,SACI,cAAC8G,EAAA,EAAD,CAAQJ,QAAQ,UAAU3F,KAAK,KAAKX,QAAS,kBAAM,EAAKuH,mBAAxD,yBAIJ,eAACQ,EAAA,EAAD,WAEQhG,KAAKyE,MAAMtD,QAAQ/B,KAAI,SAACrC,EAAQmC,GAC5B,OACI,cAAC+G,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,cAACtJ,EAAD,CAAYE,OAAQA,EACRmC,MAAOA,EACPf,SACI,cAAC,IAAD,CAAiBJ,KAAMqI,SACNnI,QAAS,kBAAM,EAAKwH,UAAU1I,EAAQmC,MAE3Dd,UAAW,cAACiI,EAAA,EAAD,CAAapI,QAAS,kBAAM,EAAKqH,aAAapG,MACzDoH,cAAe,EAAKnB,aAAaoB,KAAK,GAPlD,SAQKxJ,EAAOO,OAAS,cAACuB,EAAD,CAAYvB,MAAOP,EAAOO,WAT1B4B,MAerC,cAAC+G,EAAA,EAAD,CAAKC,GAAI,GAAIM,GAAI,EAAjB,SACI,cAAC9H,EAAD,CAAeT,QAAS+B,KAAK8E,oBAKrC9E,KAAKyE,MAAMmB,aAAe,cAAChC,GAAD,CAAaG,KAAM/D,KAAKyE,MAAMkB,UACjB1B,YAAajE,KAAK6F,WAClBjB,WAAY5E,KAAK8F,UACjBxI,MAAO0C,KAAKyE,MAAMmB,YAAYtI,e,GA5F/CmJ,IAAMC,WCSjCC,GAnBA,CACX,CACIC,KAAM,IACNC,OAAO,EACP3I,KAAM,QACN4I,KAAM,kBAAM,wCAEhB,CACIF,KAAM,gBACN1I,KAAM,YACN4I,KAAM,kBAAM,cAAC,GAAD,MAEhB,CACIF,KAAM,aACN1I,KAAM,aACN4I,KAAM,kBAAM,8CCbL,SAASC,KACpB,OACI,cAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKvJ,GAAG,OAAO4G,QAAQ,OAAvD,SACI,eAACwB,EAAA,EAAD,WACI,cAACiB,EAAA,EAAOG,MAAR,0BACA,cAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,0BAC7B,cAACL,EAAA,EAAO3I,SAAR,CAAiBiJ,GAAG,wBAApB,SACI,cAACC,EAAA,EAAD,CAAK1J,UAAU,UAAf,SAEQ8I,GAAOvH,KAAI,SAACoI,EAAOtI,GACf,OACI,cAACqI,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAkBE,GAAIH,EAAMZ,KAAMgB,KAAMJ,EAAMZ,KAA5D,SACKY,EAAMtJ,MADcgB,eCV9C,SAAS2I,KACpB,OACI,eAAC,IAAD,WACI,cAACd,GAAD,IACA,cAAC,IAAD,UAEQJ,GAAOvH,KAAI,SAACoI,EAAOtI,GAAR,OACP,cAAC,IAAD,CAEI0H,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,MACbrI,SAAU,cAACgJ,EAAMV,KAAP,KAHL5H,WCRjC4I,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACH,GAAD,MAEJI,SAASC,eAAe,W","file":"static/js/main.8d916d3c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Card, Collapse } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from \"@fortawesome/free-solid-svg-icons/faUserCircle\";\n\nexport default function PlayerCard(props) {\n    const player = props.player;\n    const [points, setPoints] = useState(0);\n    const [open, setOpen] = useState(true);\n\n    useEffect(() => {\n        if (player.board) {\n            setPoints([...player.board.values()].reduce((acc, val) => acc + val.points, 0));\n        }\n    })\n\n    return (\n        <Card bg='light' border=\"light\" className=\"app-card\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <FontAwesomeIcon icon={faUserCircle} className=\"mx-1\" onClick={() => setOpen(!open)}/>\n                    <span>{player.name}</span>\n                    <div className='mx-1'>{props?.slotLeft}</div>\n                    <div className='flex-grow-1'/>\n                    <div className='mx-1'>{props?.slotRight}</div>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body>\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end mx-2\">\n                Total: {points}\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import { Accordion, Badge, Table } from \"react-bootstrap\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\n\nexport default function ScoreTable(props) {\n\n    const Body = (props) => {\n        return (\n            <Table responsive striped>\n                <thead>\n                <tr>\n                    <th>Card</th>\n                    <th>Quantity</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    props.board.get(props.index).cards.map((card: CardWithQuantity, index: number) => {\n                        return (\n                            <tr key={index}>\n                                <td>{card.item.name}</td>\n                                <td>{card.quantity}</td>\n                            </tr>\n                        )\n                    })\n                }\n                </tbody>\n            </Table>\n        )\n    }\n\n    return (\n        <Accordion>\n            {\n                [...props.board.keys()].map((key, index) => {\n                    return (\n                        <Accordion.Item eventKey={index} key={index}>\n                            <Accordion.Header>\n                                <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(key).points}</Badge>\n                                {key}\n                            </Accordion.Header>\n                            <Accordion.Body>\n                                <Body index={key} board={props.board}/>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    )\n                })\n            }\n        </Accordion>\n    )\n}\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","export const scientificStructureTypes = {\n    cog: 'Cog',\n    compass: 'Compass',\n    tablet: 'Tablet',\n}\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { scientificStructureTypes } from \"../Models/scientific-structure-types.enum\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n            player.board.set(key, {\n                points: points,\n                cards: boardItem.cards\n            })\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: []) => {\n    const byType = new Counter(cards, card => card.item.type);\n    const identicalSymbolPoints = sum(Object.values(scientificStructureTypes).map(scienceType => Math.pow(byType.get(scienceType), 2)));\n\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n\nclass Counter extends Map {\n    constructor(iter, key = null) {\n        super();\n        this.key = key || (x => x);\n        for (let x of iter) {\n            this.add(x, x.quantity);\n        }\n    }\n\n    add(x, multiplier) {\n        x = this.key(x);\n        this.set(x, (((this.get(x) || 0)) + 1) * multiplier);\n    }\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class GizaPhaseOne implements Card {\n    name = 'Phase 1';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class GizaPhaseTwo implements Card {\n    name = 'Phase 2';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class GizaPhaseThree implements Card {\n    name = 'Phase 3';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseOne implements Card {\n    name = 'Phase 1';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseTwo implements Card {\n    name = 'Phase 2';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseThree implements Card {\n    name = 'Phase 3';\n\n    action() {\n        return 1;\n    };\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Pawnshop implements Card {\n    name = 'Pawnshop';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class Baths implements Card {\n    name = 'Pawnshop';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class Altar implements Card {\n    name = 'Altar';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class Theater implements Card {\n    name = 'Theater';\n\n    action() {\n        return 2;\n    }\n}\n\n\n// const civicCards = {\n//     Pawnshop,\n//     Baths,\n//     Altar,\n//     Theater\n// };\n\n\n","import { Card } from \"../Models/card.model\";\nimport { scientificStructureTypes } from \"../Models/scientific-structure-types.enum\";\n\nexport class Scriptorium implements Card {\n    name = 'Scriptorium';\n    type = scientificStructureTypes.tablet;\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Workshop implements Card {\n    name = 'Workshop';\n    type = scientificStructureTypes.cog;\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Apothecary implements Card {\n    name = 'Apothecary';\n    type = scientificStructureTypes.compass;\n\n    action() {\n        return 1;\n    };\n}\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Marketplace implements Card {\n    name = 'Marketplace';\n\n    action() {\n        return 0;\n    };\n}\n\nexport class Vineyard implements Card {\n    name = 'Vineyard';\n\n    action() {\n        return 0;\n    }\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'material cards do not play an action';\n\nexport class LumberYard implements Card {\n    name = 'Lumber Yard'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n","import { Gold, Silver } from \"../Cards/money.cards\";\nimport { BattleLosses, BattleWins } from \"../Cards/military.cards\";\nimport { GizaPhaseOne, GizaPhaseThree, GizaPhaseTwo } from \"../Cards/wonders.cards\";\nimport { Altar, Baths, Pawnshop, Theater } from \"../Cards/civic.cards\";\nimport { Apothecary, Scriptorium, Workshop } from \"../Cards/science.cards\";\nimport { Marketplace, Vineyard } from \"../Cards/commerce.cards\";\nimport { LumberYard } from \"../Cards/material.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    boardMap.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0\n            }\n        ]\n    })\n    boardMap.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            }\n        ]\n    });\n    boardMap.set('wonders', {\n        points: 0,\n        cards: [\n            {\n                item: new GizaPhaseOne(),\n                quantity: 0,\n            },\n            {\n                item: new GizaPhaseTwo(),\n                quantity: 0,\n            },\n            {\n                item: new GizaPhaseThree(),\n                quantity: 0,\n            }\n        ]\n    });\n    boardMap.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new Pawnshop(),\n                quantity: 0,\n            },\n            {\n                item: new Baths(),\n                quantity: 0,\n            },\n            {\n                item: new Altar(),\n                quantity: 0,\n            },\n            {\n                item: new Theater(),\n                quantity: 0,\n            },\n\n        ]\n    },);\n    boardMap.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Scriptorium(),\n                quantity: 0,\n            },\n            {\n                item: new Workshop(),\n                quantity: 0,\n            },\n            {\n                item: new Apothecary(),\n                quantity: 0,\n            }\n        ]\n    },);\n    boardMap.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Vineyard(),\n                quantity: 0,\n            },\n            {\n                item: new Marketplace(),\n                quantity: 0,\n            },\n        ]\n    });\n    boardMap.set('material', {\n        points: 0,\n        cards: [\n            {\n                item: new LumberYard(),\n                quantity: 0,\n            }\n        ]\n    });\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","import { useState } from \"react\";\n\nexport default function QuantitySelector(props) {\n    const min = props?.min ?? 0;\n    const max = props?.max ?? Number.MAX_VALUE;\n\n    const [value, setValue] = useState(props.value);\n\n    const decrement = () => {\n        if (value > min) {\n            setQuantityInternal(value - 1)\n        }\n    }\n\n    const increment = () => {\n        if (value < max) {\n            setQuantityInternal(value + 1)\n        }\n    }\n\n\n    const setQuantityInternal = (value) => {\n        props.onChange(value);\n        setValue(value);\n    }\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={decrement}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={value} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={increment}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, ListGroup, Modal } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\n\nexport default function CardBuilder(props) {\n    const [board, setBoard] = useState(props.board ?? boardService.get())\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        setBoard(state => new Map(state).set(boardItemKey, map))\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Board Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Accordion>\n                    {[...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                            <ListGroup.Item key={cardIndex} className=\"position-relative py-3\">\n                                                <div className=\"position-absolute top-50 start-0 translate-middle-y\">\n                                                    {card.item.name}\n                                                </div>\n                                                <div className=\"position-absolute top-50 end-0 translate-middle-y\">\n                                                    <QuantitySelector value={card.quantity}\n                                                                      min={0}\n                                                                      onChange={quantity => update(quantity, boardItemKey, cardIndex)}/>\n                                                </div>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        )\n                    )}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() =>  props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { Button, CloseButton, Col, Container, Row } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport ScoreTable from \"../Components/score-table\";\nimport Player from \"../Models/player.model\";\nimport { scoreService } from \"../Services/score.service\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport CardBuilder from \"../Components/card-builder\";\n\nexport default class SevenWonders extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [\n                new Player('steven'),\n                new Player('charlotte'),\n            ],\n            modalOpen: false,\n            modalPlayer: null,\n            playerIndex: null\n        };\n    }\n\n    addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            this.setState((state) => ({\n                players: update(state.players, {$push: [new Player(playerName),]})\n            }));\n        }\n    }\n\n    updatePlayer = (player, index) => {\n        const statePlayers = this.state.players.slice();\n        statePlayers[index] = player;\n        this.setState({players: statePlayers});\n    }\n\n    removePlayer = (index) => {\n        this.setState((state) => update(state, {players: {$splice: [[index, 1]]}}));\n    };\n\n    calculateScores = () => {\n        const players = scoreService.calculate(this.state.players.slice());\n        this.setState({players: players});\n    };\n\n    openModal = (player, playerIndex) => {\n        this.setState({modalOpen: true, modalPlayer: player, playerIndex: playerIndex})\n    }\n\n    closeModal = () => {\n        this.setState({modalOpen: false, modalPlayer: null})\n    }\n\n    saveModal = (board) => {\n        const index = this.state.playerIndex;\n        const player = this.state.players[index]\n        player.board = board;\n        this.updatePlayer(player, index);\n        this.closeModal();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"m-3\">7-Wonders</h1>\n                <Container>\n                    <div className=\"d-grid gap-2\">\n                        <Button variant=\"primary\" size=\"lg\" onClick={() => this.calculateScores()}>\n                            Calculate\n                        </Button>\n                    </div>\n                    <Row>\n                        {\n                            this.state.players.map((player, index) => {\n                                return (\n                                    <Col xs={12} sm={6} key={index}>\n                                        <PlayerCard player={player}\n                                                    index={index}\n                                                    slotLeft={\n                                                        <FontAwesomeIcon icon={faPlus}\n                                                                         onClick={() => this.openModal(player, index)}/>\n                                                    }\n                                                    slotRight={<CloseButton onClick={() => this.removePlayer(index)}/>}\n                                                    updateHandler={this.updatePlayer.bind(this)}>\n                                            {player.board && <ScoreTable board={player.board}/>}\n                                        </PlayerCard>\n                                    </Col>\n                                )\n                            })\n                        }\n                        <Col xs={12} md={6}>\n                            <AddPlayerCard onClick={this.addPlayer}/>\n                        </Col>\n                    </Row>\n                </Container>\n                {\n                    this.state.modalPlayer && <CardBuilder show={this.state.modalOpen}\n                                                           handleClose={this.closeModal}\n                                                           handleSave={this.saveModal}\n                                                           board={this.state.modalPlayer.board}/>}\n            </div>\n        )\n    }\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}