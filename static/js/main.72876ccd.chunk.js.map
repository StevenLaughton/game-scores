{"version":3,"sources":["Components/player-card.jsx","Components/add-player-card.jsx","Models/card.model.js","Components/score-table.jsx","Models/player.model.js","Models/scientific-structure-types.enum.js","Helpers/array.helper.js","Services/score.service.js","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Cards/commerce.cards.js","Cards/misc.cards.js","Helpers/card.helper.js","Cards/guild.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","useState","open","setOpen","bg","border","className","Header","icon","faUserCircle","onClick","name","slotLeft","slotRight","Collapse","in","Body","children","Footer","points","AddPlayerCard","faPlusCircle","size","Card","this","constructor","Error","ScoreTable","Table","responsive","striped","board","get","index","cards","map","card","item","quantity","Accordion","keys","key","Item","eventKey","Badge","pill","Player","scientificStructureTypes","cog","compass","tablet","sum","arr","reduce","acc","val","nextItem","length","prevItem","calculateScientificStructures","byType","Counter","type","Object","values","scienceType","Math","pow","min","sumOfCardActionTimesQuantity","action","scoreService","players","forEach","player","boardItem","floor","set","calculateScore","iter","x","add","multiplier","Map","Silver","Gold","BattleWins","BattleLosses","GizaPhaseOne","GizaPhaseTwo","GizaPhaseThree","Pawnshop","Baths","Altar","Theater","Scriptorium","Workshop","Apothecary","Marketplace","Vineyard","errorMessage","Brown","Grey","Red","numberOfMiscCards","count","numberOfBrownCards","numberOfGreyCards","numberOfRedCards","numberOfBattleLosses","filter","numberOfCards","WorkersGuild","CraftsmensGuild","TradersGuild","PhilosophersGuild","SpiesGuild","StrategistsGuild","ShipownersGuild","MagistratesGuild","BuildersGuild","getBoard","boardMap","boardService","QuantitySelector","max","Number","MAX_VALUE","value","setValue","setQuantityInternal","onChange","readOnly","CardBuilder","setBoard","Modal","show","onHide","handleClose","closeButton","Title","boardItemKey","boardIndex","ListGroup","variant","cardIndex","state","update","Button","handleSave","SevenWonders","addPlayer","playerName","prompt","setState","$push","updatePlayer","statePlayers","slice","removePlayer","$splice","calculateScores","openModal","playerIndex","modalOpen","modalPlayer","closeModal","saveModal","getPoints","console","log","Container","Row","Col","xs","sm","faPlus","CloseButton","md","React","Component","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","Toggle","aria-controls","id","Nav","route","Link","as","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72876ccd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Collapse } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from \"@fortawesome/free-solid-svg-icons/faUserCircle\";\n\nexport default function PlayerCard(props) {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <Card bg='light' border=\"light\" className=\"app-card\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <FontAwesomeIcon icon={faUserCircle} className=\"mx-1\" onClick={() => setOpen(!open)}/>\n                    <span>{props.name}</span>\n                    <div className='mx-1'>{props?.slotLeft}</div>\n                    <div className='flex-grow-1'/>\n                    <div className='mx-1'>{props?.slotRight}</div>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body>\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end\">\n                <span className='mx-2'>Total: {props.points}</span>\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","export class Card {\n    constructor() {\n        if (this.constructor === Card) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n    }\n\n    name: string;\n    action() {\n        throw new Error(\"Method must be implemented.\")\n    };\n}\n\n","import { Accordion, Badge, Table } from \"react-bootstrap\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\n\nexport default function ScoreTable(props) {\n\n    const Body = (props) => {\n        return (\n            <Table responsive striped>\n                <thead>\n                <tr>\n                    <th>Card</th>\n                    <th>Quantity</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    props.board.get(props.index).cards.map((card: CardWithQuantity, index: number) => {\n                        return (\n                            <tr key={index}>\n                                <td>{card.item.name}</td>\n                                <td>{card.quantity}</td>\n                            </tr>\n                        )\n                    })\n                }\n                </tbody>\n            </Table>\n        )\n    }\n\n    return (\n        <Accordion>\n            {\n                [...props.board.keys()].map((key, index) => {\n                    return (\n                        <Accordion.Item eventKey={index} key={index}>\n                            <Accordion.Header>\n                                <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(key).points}</Badge>\n                                {key}\n                            </Accordion.Header>\n                            <Accordion.Body>\n                                <Body index={key} board={props.board}/>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    )\n                })\n            }\n        </Accordion>\n    )\n}\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","export const scientificStructureTypes = {\n    cog: 'Cog',\n    compass: 'Compass',\n    tablet: 'Tablet',\n}\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { scientificStructureTypes } from \"../Models/scientific-structure-types.enum\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                case 'guild':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n            player.board.set(key, {\n                points: points,\n                cards: boardItem.cards\n            })\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: []) => {\n    const byType = new Counter(cards, card => card.item.type);\n    const identicalSymbolPoints = sum(Object.values(scientificStructureTypes).map(scienceType => Math.pow(byType.get(scienceType), 2)));\n\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.quantity === 0 ? 0 : card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n\nclass Counter extends Map {\n    constructor(iter, key = null) {\n        super();\n        this.key = key || (x => x);\n        for (let x of iter) {\n            this.add(x, x.quantity);\n        }\n    }\n\n    add(x, multiplier) {\n        x = this.key(x);\n        this.set(x, (((this.get(x) || 0)) + 1) * multiplier);\n    }\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class GizaPhaseOne implements Card {\n    name = 'Giza Phase 1';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class GizaPhaseTwo implements Card {\n    name = 'Giza Phase 2';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class GizaPhaseThree implements Card {\n    name = 'Giza Phase 3';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseOne implements Card {\n    name = 'Phase 1';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseTwo implements Card {\n    name = 'Phase 2';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseThree implements Card {\n    name = 'Phase 3';\n\n    action() {\n        return 1;\n    };\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Pawnshop implements Card {\n    name = 'Pawnshop';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class Baths implements Card {\n    name = 'Baths';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class Altar implements Card {\n    name = 'Altar';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class Theater implements Card {\n    name = 'Theater';\n\n    action() {\n        return 2;\n    }\n}\n\n\n// const civicCards = {\n//     Pawnshop,\n//     Baths,\n//     Altar,\n//     Theater\n// };\n\n\n","import { Card } from \"../Models/card.model\";\nimport { scientificStructureTypes } from \"../Models/scientific-structure-types.enum\";\n\nexport class Scriptorium implements Card {\n    name = 'Scriptorium';\n    type = scientificStructureTypes.tablet;\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Workshop implements Card {\n    name = 'Workshop';\n    type = scientificStructureTypes.cog;\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Apothecary implements Card {\n    name = 'Apothecary';\n    type = scientificStructureTypes.compass;\n\n    action() {\n        return 1;\n    };\n}\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Marketplace implements Card {\n    name = 'Marketplace';\n\n    action() {\n        return 0;\n    };\n}\n\nexport class Vineyard implements Card {\n    name = 'Vineyard';\n\n    action() {\n        return 0;\n    }\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'misc cards do not play an action';\n\nexport class Brown implements Card {\n    name = 'Raw Materials'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\nexport class Grey implements Card {\n    name = 'Manufactured Goods'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\nexport class Red implements Card {\n    name = 'Military Structures'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n","import Player from \"../Models/player.model\";\n\nconst numberOfMiscCards = (player, type) => {\n    let count = 0;\n    player?.board.get('misc').cards.forEach(card => {\n        if (card.item.name === type) {\n            count = card.quantity\n        }\n    })\n    return count;\n}\nexport const numberOfBrownCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Raw Materials');\n}\n\nexport const numberOfGreyCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Manufactured Goods');\n}\n\nexport const numberOfRedCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Military Structures');\n}\n\nexport const numberOfBattleLosses = (player: Player) => {\n    return player?.board.get('military').cards.filter(card => card.item.name === 'Battle Losses' && card.quantity > 0)?.length ?? 0\n}\n\nexport const numberOfCards = (player: Player, type: string) => {\n    return player?.board.get(type).cards.filter(card => card.quantity > 0)?.length ?? 0\n}\n\n","import { Card } from \"../Models/card.model\";\nimport { nextItem, prevItem } from \"../Helpers/array.helper\";\nimport {\n    numberOfBattleLosses,\n    numberOfBrownCards,\n    numberOfCards,\n    numberOfGreyCards,\n    numberOfRedCards\n} from \"../Helpers/card.helper\";\n\nexport class WorkersGuild extends Card {\n    name = 'Workers Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(prevItem(props.players, props.index))\n            + numberOfBrownCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class CraftsmensGuild extends Card {\n    name = 'Craftsmens Guild'\n\n    action = (props) => {\n        return (numberOfGreyCards(prevItem(props.players, props.index)) * 2)\n            + (numberOfGreyCards(nextItem(props.players, props.index)) * 2);\n    }\n}\n\nexport class TradersGuild extends Card {\n    name = 'Traders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'commerce')\n            + numberOfCards(nextItem(props.players, props.index), 'commerce');\n    }\n}\n\nexport class PhilosophersGuild extends Card {\n    name = 'Philosophers Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'science')\n            + numberOfCards(nextItem(props.players, props.index), 'science');\n    }\n}\n\nexport class SpiesGuild extends Card {\n    name = 'Spies Guild'\n\n    action = (props) => {\n        return numberOfRedCards(prevItem(props.players, props.index))\n            + numberOfRedCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class StrategistsGuild extends Card {\n    name = 'Strategists Guild'\n\n    action = (props) => {\n        return numberOfBattleLosses(prevItem(props.players, props.index))\n            + numberOfBattleLosses(nextItem(props.players, props.index));\n    }\n}\n\nexport class ShipownersGuild extends Card {\n    name = 'Shipowners Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index])\n            + numberOfGreyCards(props.players[props.index])\n            + numberOfCards(props.players[props.index], 'guild');\n    }\n}\n\nexport class MagistratesGuild extends Card {\n    name = 'Magistrates Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'civic')\n            + numberOfCards(nextItem(props.players, props.index), 'civic');\n    }\n}\n\nexport class BuildersGuild extends Card {\n    name = 'Builders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'wonders')\n            + numberOfCards(props.players[props.index], 'wonders')\n            + numberOfCards(nextItem(props.players, props.index), 'wonders');\n    }\n}\n\nexport default function getGuildsMap(board) {\n    board.set('guild', {\n        points: 0,\n        cards: [\n            {\n                item: new WorkersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new CraftsmensGuild(),\n                quantity: 0,\n            },\n            {\n                item: new TradersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new PhilosophersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new SpiesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new StrategistsGuild(),\n                quantity: 0,\n            },\n            {\n                item: new ShipownersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new MagistratesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new BuildersGuild(),\n                quantity: 0,\n            },\n        ]\n    });\n}\n","import { Gold, Silver } from \"../Cards/money.cards\";\nimport { BattleLosses, BattleWins } from \"../Cards/military.cards\";\nimport { GizaPhaseOne, GizaPhaseThree, GizaPhaseTwo } from \"../Cards/wonders.cards\";\nimport { Altar, Baths, Pawnshop, Theater } from \"../Cards/civic.cards\";\nimport { Apothecary, Scriptorium, Workshop } from \"../Cards/science.cards\";\nimport { Marketplace, Vineyard } from \"../Cards/commerce.cards\";\nimport { Brown, Grey, Red } from \"../Cards/misc.cards\";\nimport getGuildsMap from \"../Cards/guild.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    boardMap.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0\n            }\n        ]\n    })\n    boardMap.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            }\n        ]\n    });\n    boardMap.set('wonders', {\n        points: 0,\n        cards: [\n            {\n                item: new GizaPhaseOne(),\n                quantity: 0,\n            },\n            {\n                item: new GizaPhaseTwo(),\n                quantity: 0,\n            },\n            {\n                item: new GizaPhaseThree(),\n                quantity: 0,\n            }\n        ]\n    });\n    boardMap.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new Pawnshop(),\n                quantity: 0,\n            },\n            {\n                item: new Baths(),\n                quantity: 0,\n            },\n            {\n                item: new Altar(),\n                quantity: 0,\n            },\n            {\n                item: new Theater(),\n                quantity: 0,\n            },\n\n        ]\n    },);\n    boardMap.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Scriptorium(),\n                quantity: 0,\n            },\n            {\n                item: new Workshop(),\n                quantity: 0,\n            },\n            {\n                item: new Apothecary(),\n                quantity: 0,\n            }\n        ]\n    },);\n    boardMap.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Vineyard(),\n                quantity: 0,\n            },\n            {\n                item: new Marketplace(),\n                quantity: 0,\n            },\n        ]\n    });\n    getGuildsMap(boardMap)\n    boardMap.set('misc', {\n        points: 0,\n        cards: [\n            {\n                item: new Brown(),\n                quantity: 0,\n            },\n            {\n                item: new Grey(),\n                quantity: 0,\n            },\n            {\n                item: new Red(),\n                quantity: 0,\n            },\n        ]\n    });\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","import { useState } from \"react\";\n\nexport default function QuantitySelector(props) {\n    const min = props?.min ?? 0;\n    const max = props?.max ?? Number.MAX_VALUE;\n\n    const [value, setValue] = useState(props.value);\n\n    const decrement = () => {\n        if (value > min) {\n            setQuantityInternal(value - 1)\n        }\n    }\n\n    const increment = () => {\n        if (value < max) {\n            setQuantityInternal(value + 1)\n        }\n    }\n\n\n    const setQuantityInternal = (value) => {\n        props.onChange(value);\n        setValue(value);\n    }\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={decrement}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={value} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={increment}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, ListGroup, Modal } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\n\nexport default function CardBuilder(props) {\n    const [board, setBoard] = useState(props.board ?? boardService.get())\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        setBoard(state => new Map(state).set(boardItemKey, map))\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Board Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Accordion>\n                    {[...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                            <ListGroup.Item key={cardIndex} className='d-flex'>\n                                                {card.item.name}\n                                                <div className='flex-grow-1'/>\n                                                <div>\n                                                    <QuantitySelector value={card.quantity}\n                                                                      min={0}\n                                                                      onChange={quantity => update(quantity, boardItemKey, cardIndex)}/>\n                                                </div>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        )\n                    )}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() => props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { Button, CloseButton, Col, Container, Row } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport ScoreTable from \"../Components/score-table\";\nimport Player from \"../Models/player.model\";\nimport { scoreService } from \"../Services/score.service\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport CardBuilder from \"../Components/card-builder\";\n\nexport default class SevenWonders extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [\n                new Player('steven'),\n                new Player('charlotte'),\n            ],\n            modalOpen: false,\n            modalPlayer: null,\n            playerIndex: null\n        };\n    }\n\n    componentDidMount() {\n        console.log('did mount')\n    }\n\n    addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            this.setState((state) => ({\n                players: update(state.players, {$push: [new Player(playerName),]})\n            }));\n        }\n    }\n\n    updatePlayer = (player, index) => {\n        const statePlayers = this.state.players.slice();\n        statePlayers[index] = player;\n        this.setState({players: statePlayers});\n    }\n\n    removePlayer = (index) => {\n        this.setState((state) => update(state, {players: {$splice: [[index, 1]]}}));\n    };\n\n    calculateScores = () => {\n        const players = scoreService.calculate(this.state.players.slice());\n        this.setState({players: players});\n    };\n\n    openModal = (player, playerIndex) => {\n        this.setState({modalOpen: true, modalPlayer: player, playerIndex: playerIndex})\n    }\n\n    closeModal = () => {\n        this.setState({modalOpen: false, modalPlayer: null})\n    }\n\n    saveModal = (board) => {\n        const index = this.state.playerIndex;\n        const player = this.state.players[index]\n        player.board = board;\n        this.updatePlayer(player, index);\n        this.closeModal();\n    }\n\n    getPoints = (player) => {\n        return player.board\n            ? ([...player.board.values()].reduce((acc, val) => acc + val.points, 0))\n            : 0;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"m-3\">7-Wonders</h1>\n                <Container>\n                    <div className=\"d-grid gap-2\">\n                        <Button variant=\"primary\" size=\"lg\" onClick={() => this.calculateScores()}>\n                            Calculate\n                        </Button>\n                    </div>\n                    <Row>\n                        {\n                            this.state.players.map((player, index) => {\n                                return (\n                                    <Col xs={12} sm={6} key={index}>\n                                        <PlayerCard name={player.name}\n                                                    points={this.getPoints(player)}\n                                                    slotLeft={\n                                                        <FontAwesomeIcon icon={faPlus}\n                                                                         onClick={() => this.openModal(player, index)}/>\n                                                    }\n                                                    slotRight={<CloseButton onClick={() => this.removePlayer(index)}/>}>\n                                            {player.board && <ScoreTable board={player.board}/>}\n                                        </PlayerCard>\n                                    </Col>\n                                )\n                            })\n                        }\n                        <Col xs={12} md={6}>\n                            <AddPlayerCard onClick={this.addPlayer}/>\n                        </Col>\n                    </Row>\n                </Container>\n                {\n                    this.state.modalPlayer && <CardBuilder show={this.state.modalOpen}\n                                                           handleClose={this.closeModal}\n                                                           handleSave={this.saveModal}\n                                                           board={this.state.modalPlayer.board}/>}\n            </div>\n        )\n    }\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}