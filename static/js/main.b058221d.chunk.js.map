{"version":3,"sources":["Components/player-card.jsx","Models/card.model.js","Models/player.model.js","Components/add-player-card.jsx","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Helpers/array.helper.js","Helpers/card.helper.js","Cards/commerce.cards.js","Cards/misc.cards.js","Cards/guild.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Hooks/map.hook.js","Components/player-scoreboard.jsx","Components/shared/drag-drop.jsx","Services/score.service.js","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","useState","open","setOpen","bg","border","Header","className","Dropdown","Toggle","size","Menu","menu","name","icon","faChevronLeft","onClick","Collapse","in","Body","children","Footer","points","Card","this","constructor","Error","Player","AddPlayerCard","faPlusCircle","Silver","Gold","BattleWins","BattleLosses","Wonder","wonder","val","action","getWonder","board","side","current","get","sideA","option","wonders","Rhodes","Giza","Alexandria","Ephesus","Babylon","Olympia","Halicarnassus","cards","map","item","quantity","TwoPoint","ThreePoint","FourPoint","FivePoint","SixPoint","SevenPoint","EightPoint","Tablet","Cog","Compass","sum","arr","reduce","acc","nextItem","index","length","prevItem","numberOfMiscCards","player","type","count","forEach","card","numberOfBrownCards","numberOfGreyCards","numberOfRedCards","numberOfBattleLosses","filter","numberOfCards","Haven","players","Lighthouse","ChamberOfCommerce","YellowOther","errorMessage","Brown","Grey","Red","WorkersGuild","CraftsmensGuild","TradersGuild","PhilosophersGuild","SpiesGuild","StrategistsGuild","ShipownersGuild","MagistratesGuild","BuildersGuild","getBoard","boardMap","Map","set","getMilitaryMap","getMoneyMap","getCivicMap","getScienceMap","getCommerceMap","getGuildsMap","getMiscMap","boardService","QuantitySelector","max","Number","MAX_VALUE","value","onChange","readOnly","CardBuilder","initialSet","state","setState","key","prev","clone","unset","delete","clear","useMap","update","boardItemKey","cardIndex","WonderPicker","Row","options","Object","entries","label","isSearchable","FormControlLabel","control","Switch","checked","target","Form","Check","inline","Modal","show","onHide","handleClose","closeButton","Title","Accordion","keys","boardIndex","Item","eventKey","ListGroup","variant","Button","handleSave","PlayerScoreboard","Badge","pill","DragDrop","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","placeholder","Drag","draggableId","snapshot","draggableProps","dragHandleProps","style","isDragging","draggableStyle","userSelect","calculateScientificStructures","Math","pow","min","sumOfCardActionTimesQuantity","scoreService","boardItem","floor","assign","calculateScore","SevenWonders","initialPlayers","useList","push","updateAt","removeAt","modal","setModal","useDeepCompareEffect","console","log","slice","closeModal","getPoints","values","dropdownMenu","as","openModal","Divider","Container","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","playerName","prompt","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","aria-controls","id","Nav","route","Link","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b058221d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Collapse, Dropdown } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function PlayerCard(props) {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <Card bg='light' border=\"light\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <Dropdown className='mx-1'>\n                        <Dropdown.Toggle size=\"sm\"/>\n                        <Dropdown.Menu>\n                            {props.menu}\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <span>{props.name}</span>\n                    <div className='flex-grow-1'/>\n                    <div className={open ? \"isRotated\" : \"\"}>\n                        <FontAwesomeIcon icon={faChevronLeft}\n                                         className=\"mx-1\"\n                                         onClick={() => setOpen(!open)}/>\n                    </div>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body className=\"p-0\">\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end\">\n                <span className='mx-2'>Total: {props.points}</span>\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","export class Card {\n    constructor() {\n        if (this.constructor === Card) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n    }\n\n    name: string;\n    action() {\n        throw new Error(\"Method must be implemented.\")\n    };\n}\n\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\nexport default function getMoneyMap(board) {\n    board.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\nexport default function getMilitaryMap(board) {\n    board.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Wonder implements Card {\n    constructor(wonder: wonders, val: number) {\n        this.name = `${wonder} Phase One`\n        this.action = () => val;\n    }\n}\n\nexport function getWonder(board, wonder, side) {\n    let points;\n    const current = board?.get('wonders');\n    const sideA = side ?? current?.sideA ?? true\n    const option = wonder ?? current?.option ?? wonders.Rhodes;\n\n    if (sideA) {\n        points = wonder === wonders.Giza\n            ? [3, 5, 7]\n            : [3, 0, 7]\n    } else {\n        switch (option) {\n            case wonders.Rhodes:\n                points = [3, 4];\n                break;\n            case wonders.Alexandria:\n                points = [0, 0, 7];\n                break;\n            case wonders.Ephesus:\n                points = [2, 3, 5];\n                break;\n            case wonders.Babylon:\n                points = [3, 0, 0];\n                break;\n            case wonders.Olympia:\n                points = [0, 5, 0];\n                break;\n            case wonders.Halicarnassus:\n                points = [2, 1, 0];\n                break;\n            case wonders.Giza:\n                points = [3, 5, 5, 7];\n                break;\n            default:\n                points = [0,0,0]\n                break;\n        }\n    }\n\n    return {\n        points: 0,\n        option: option,\n        sideA: sideA,\n        cards: points.map(val => ({item: new Wonder(wonder, val), quantity: 0}))\n    };\n}\n\nexport default function getWonderMap(board) {\n    board.set('wonders', getWonder());\n}\n\nexport const wonders = {\n    Rhodes: 'Rhodes',\n    Alexandria: 'Alexandria',\n    Ephesus: 'Ephesus',\n    Babylon: 'Babylon',\n    Olympia: 'Olympia',\n    Halicarnassus: 'Halicarnassus',\n    Giza: 'Giza',\n}\n\nexport const wondersSelect = () => {\n    return Object.entries(wonders).map(wonder => ({value: wonder[0], label: wonder[1]}));\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class TwoPoint implements Card {\n    name = 'Two Victory Points';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class ThreePoint implements Card {\n    name = 'Three Victory Points';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class FourPoint implements Card {\n    name = 'Four Victory Points';\n\n    action() {\n        return 4;\n    }\n}\n\nexport class FivePoint implements Card {\n    name = 'Five Victory Points';\n\n    action() {\n        return 5;\n    }\n}\n\nexport class SixPoint implements Card {\n    name = 'Six Victory Points';\n\n    action() {\n        return 6;\n    }\n}\n\nexport class SevenPoint implements Card {\n    name = 'Seven Victory Points';\n\n    action() {\n        return 7;\n    }\n}\n\nexport class EightPoint implements Card {\n    name = 'Eight Victory Points';\n\n    action() {\n        return 8;\n    }\n}\n\n\nexport default function getCivicMap(board) {\n    board.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new TwoPoint(),\n                quantity: 0,\n            },\n            {\n                item: new ThreePoint(),\n                quantity: 0,\n            },\n            {\n                item: new FourPoint(),\n                quantity: 0,\n            },\n            {\n                item: new FivePoint(),\n                quantity: 0,\n            },\n            {\n                item: new SixPoint(),\n                quantity: 0,\n            },\n            {\n                item: new SevenPoint(),\n                quantity: 0,\n            },\n            {\n                item: new EightPoint(),\n                quantity: 0,\n            },\n        ]\n    })\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Tablet implements Card {\n    name = 'Tablet';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Cog implements Card {\n    name = 'Cog';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Compass implements Card {\n    name = 'Compass';\n\n    action() {\n        return 1;\n    };\n}\n\nexport default function getScienceMap(board) {\n    board.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Tablet(),\n                quantity: 0,\n            },\n            {\n                item: new Cog(),\n                quantity: 0,\n            },\n            {\n                item: new Compass(),\n                quantity: 0,\n            }\n        ]\n    },);\n}\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n\nexport const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n","import Player from \"../Models/player.model\";\nimport { sum } from \"./array.helper\";\n\nconst numberOfMiscCards = (player, type) => {\n    let count = 0;\n    player.board?.get('misc').cards.forEach(card => {\n        if (card.item.name === type) {\n            count = card.quantity\n        }\n    })\n    return count;\n}\nexport const numberOfBrownCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Raw Materials');\n}\n\nexport const numberOfGreyCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Manufactured Goods');\n}\n\nexport const numberOfRedCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Military Structures');\n}\n\nexport const numberOfBattleLosses = (player: Player) => {\n    return player.board?.get('military').cards.filter(card => card.item.name === 'Battle Losses' && card.quantity > 0)?.length ?? 0\n}\n\nexport const numberOfCards = (player: Player, type: string) => {\n    return sum(player.board?.get(type).cards.map(card => card.quantity) ?? [0]);\n}\n\n","import { Card } from \"../Models/card.model\";\nimport { numberOfBrownCards, numberOfCards, numberOfGreyCards } from \"../Helpers/card.helper\";\n\n\nexport class Haven implements Card {\n    name = 'Haven';\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index]);\n    }\n}\n\nexport class Lighthouse implements Card {\n    name = 'Lighthouse';\n\n    action = (props) => {\n        return numberOfCards(props.players[props.index], 'commerce');\n    }\n}\n\nexport class ChamberOfCommerce implements Card {\n    name = 'Chamber Of Commerce';\n\n    action = (props) => {\n        return (numberOfGreyCards(props.players[props.index]) * 2);\n    }\n}\n\nexport class Arena implements Card {\n    name = 'Arena';\n\n    action = (props) => {\n        return numberOfCards(props.players[props.index], 'wonders');\n    }\n}\n\nexport class YellowOther implements Card {\n    name = 'Other';\n\n    action = () => {\n        return 0;\n    }\n}\n\nexport default function getCommerceMap(board) {\n    board.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Haven(),\n                quantity: 0,\n            },\n            {\n                item: new Lighthouse(),\n                quantity: 0,\n            },\n            {\n                item: new ChamberOfCommerce(),\n                quantity: 0,\n            },\n            {\n                item: new YellowOther(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'misc cards do not play an action';\n\nexport class Brown implements Card {\n    name = 'Raw Materials'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Grey implements Card {\n    name = 'Manufactured Goods'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Red implements Card {\n    name = 'Military Structures'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport default function getMiscMap(board) {\n    board.set('misc', {\n        points: 0,\n        cards: [\n            {\n                item: new Brown(),\n                quantity: 0,\n            },\n            {\n                item: new Grey(),\n                quantity: 0,\n            },\n            {\n                item: new Red(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\nimport { nextItem, prevItem } from \"../Helpers/array.helper\";\nimport {\n    numberOfBattleLosses,\n    numberOfBrownCards,\n    numberOfCards,\n    numberOfGreyCards,\n    numberOfRedCards\n} from \"../Helpers/card.helper\";\n\nexport class WorkersGuild extends Card {\n    name = 'Workers Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(prevItem(props.players, props.index))\n            + numberOfBrownCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class CraftsmensGuild extends Card {\n    name = 'Craftsmens Guild'\n\n    action = (props) => {\n        return (numberOfGreyCards(prevItem(props.players, props.index)) * 2)\n            + (numberOfGreyCards(nextItem(props.players, props.index)) * 2);\n    }\n}\n\nexport class TradersGuild extends Card {\n    name = 'Traders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'commerce')\n            + numberOfCards(nextItem(props.players, props.index), 'commerce');\n    }\n}\n\nexport class PhilosophersGuild extends Card {\n    name = 'Philosophers Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'science')\n            + numberOfCards(nextItem(props.players, props.index), 'science');\n    }\n}\n\nexport class SpiesGuild extends Card {\n    name = 'Spies Guild'\n\n    action = (props) => {\n        return numberOfRedCards(prevItem(props.players, props.index))\n            + numberOfRedCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class StrategistsGuild extends Card {\n    name = 'Strategists Guild'\n\n    action = (props) => {\n        return numberOfBattleLosses(prevItem(props.players, props.index))\n            + numberOfBattleLosses(nextItem(props.players, props.index));\n    }\n}\n\nexport class ShipownersGuild extends Card {\n    name = 'Shipowners Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index])\n            + numberOfGreyCards(props.players[props.index])\n            + numberOfCards(props.players[props.index], 'guild');\n    }\n}\n\nexport class MagistratesGuild extends Card {\n    name = 'Magistrates Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'civic')\n            + numberOfCards(nextItem(props.players, props.index), 'civic');\n    }\n}\n\nexport class BuildersGuild extends Card {\n    name = 'Builders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'wonders')\n            + numberOfCards(props.players[props.index], 'wonders')\n            + numberOfCards(nextItem(props.players, props.index), 'wonders');\n    }\n}\n\nexport default function getGuildsMap(board) {\n    board.set('guild', {\n        points: 0,\n        cards: [\n            {\n                item: new WorkersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new CraftsmensGuild(),\n                quantity: 0,\n            },\n            {\n                item: new TradersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new PhilosophersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new SpiesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new StrategistsGuild(),\n                quantity: 0,\n            },\n            {\n                item: new ShipownersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new MagistratesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new BuildersGuild(),\n                quantity: 0,\n            },\n        ]\n    });\n}\n","import getMoneyMap from \"../Cards/money.cards\";\nimport getMilitaryMap from \"../Cards/military.cards\";\nimport getWonderMap from \"../Cards/wonders.cards\";\nimport getCivicMap from \"../Cards/civic.cards\";\nimport getScienceMap from \"../Cards/science.cards\";\nimport getCommerceMap from \"../Cards/commerce.cards\";\nimport getMiscMap from \"../Cards/misc.cards\";\nimport getGuildsMap from \"../Cards/guild.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    getWonderMap(boardMap)\n    getMilitaryMap(boardMap)\n    getMoneyMap(boardMap)\n    getCivicMap(boardMap)\n    getScienceMap(boardMap)\n    getCommerceMap(boardMap)\n    getGuildsMap(boardMap)\n    getMiscMap(boardMap)\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","export default function QuantitySelector(props) {\n    const min = 0;\n    const max = Number.MAX_VALUE;\n\n\n    const increase = () => {\n        if (props.value < max) {\n            props.onChange(props.value + 1);\n        }\n    }\n\n    const decrease = () => {\n        if (props.value > min) {\n            props.onChange(props.value - 1);\n        }\n    }\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={decrease}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={props.value} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={increase}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, Form, ListGroup, Modal, Row } from \"react-bootstrap\";\nimport React from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\nimport Select from 'react-select'\nimport { getWonder, wondersSelect } from \"../Cards/wonders.cards\";\nimport useMap from \"../Hooks/map.hook\";\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\n\nexport default function CardBuilder(props) {\n    const [board, {set}] = useMap(props.board ?? boardService.get())\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        set(boardItemKey, map)\n    }\n\n    const WonderPicker = () => {\n        return (\n            <>\n                <Row>\n                    <Select options={wondersSelect()}\n                            value={{label: board.get('wonders').option}}\n                            isSearchable={false}\n                            onChange={option => set('wonders', getWonder(board, option.value))}>\n                    </Select>\n                    <FormControlLabel\n                        label={`Side ${board.get('wonders').sideA ? 'A' : 'B'}`}\n                        control={\n                            <Switch checked={board.get('wonders').sideA}\n                                    onChange={val => set('wonders', getWonder(board, null, val.target.checked))}/>\n                        }/>\n                </Row>\n                <div className=\"my-2\">\n                    {board?.get('wonders').cards.map((card, cardIndex) => (\n                        <Form.Check key={cardIndex}\n                                    inline\n                                    label={`Phase ${cardIndex + 1}`}\n                                    checked={card.quantity === 1}\n                                    onChange={val => update(+val.target.checked, 'wonders', cardIndex)}\n                                    type='checkbox'>\n                        </Form.Check>\n                    ))}\n                </div>\n\n            </>\n        )\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Scoreboard Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"p-0\">\n                <Accordion>\n                    {\n                        [...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {(boardItemKey === 'wonders')\n                                            ? <WonderPicker/>\n                                            : board?.get(boardItemKey).cards.map((card, cardIndex) => (\n                                                <ListGroup.Item key={cardIndex} className='d-flex'>\n                                                    {card.item.name}\n                                                    <div className='flex-grow-1'/>\n                                                    <QuantitySelector\n                                                        value={card.quantity}\n                                                        onChange={quantity => update(quantity, boardItemKey, cardIndex)}>\n                                                    </QuantitySelector>\n                                                </ListGroup.Item>\n                                            ))}\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        ))}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() => props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { useState } from \"react\";\n\nexport default function useMap(initialSet) {\n    const [state, setState] = useState(new Map(initialSet))\n    const set = (key, value) => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.set(key, value)\n            return clone\n        })\n    }\n    const unset = (key) => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.delete(key)\n            return clone\n        })\n    }\n    const clear = () => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.clear()\n            return clone\n        })\n    }\n    return [state, {set, unset, clear}]\n}\n","import { Accordion, Badge, ListGroup } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport default function PlayerScoreboard(props) {\n\n    return (\n        <Accordion>\n            {[...props.board.keys()].map((boardItemKey, boardIndex) => (\n                    <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                        <Accordion.Header>\n                            <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(boardItemKey).points}</Badge>\n                            {boardItemKey}\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <ListGroup variant=\"flush\">\n                                {props.board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                    <ListGroup.Item key={cardIndex} className='d-flex'>\n                                        {card.item.name}\n                                        <div className='flex-grow-1'/>\n                                        <span>{card.quantity}</span>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )\n            )}\n        </Accordion>\n    )\n}\n","import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: \"none\",\n    ...draggableStyle\n});\n\n\nconst DragDrop = (props) => (<DragDropContext onDragEnd={props.onDragEnd}>\n    <Droppable droppableId=\"droppable\">\n        {provided => (\n            <div {...provided.droppableProps}\n                 ref={provided.innerRef}>\n                {props.children}\n                {provided.placeholder}\n            </div>)}\n    </Droppable>\n</DragDropContext>)\n\nconst Drag = (props) => (<Draggable key={props.name} draggableId={props.name} index={props.index}>\n    {(provided, snapshot) => (\n        <div ref={provided.innerRef}\n             {...provided.draggableProps}\n             {...provided.dragHandleProps}\n             className=\"mb-3\"\n             style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}>\n            {props.children}\n        </div>\n    )}\n</Draggable>);\n\nDragDrop.Drag = Drag;\n\nexport default DragDrop;\n\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                case 'wonders':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                case 'guild':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n\n            player.board.set(key, Object.assign(boardItem, {points: points}))\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: CardWithQuantity[]) => {\n    const identicalSymbolPoints = sum(cards.map(card => Math.pow(card.quantity, 2)));\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.quantity === 0 ? 0 : card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n","import { Container, Dropdown } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport React, { useState } from \"react\";\nimport Player from \"../Models/player.model\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport CardBuilder from \"../Components/card-builder\";\nimport PlayerScoreboard from \"../Components/player-scoreboard\";\nimport DragDrop from \"../Components/shared/drag-drop\";\nimport { reorder } from \"../Helpers/array.helper\";\nimport { useDeepCompareEffect, useList } from \"react-use\";\nimport { scoreService } from \"../Services/score.service\";\n\nexport default function SevenWonders(props) {\n    const initialPlayers = [new Player('steven'), new Player('charlotte')];\n\n    const [players, {set, push, updateAt, removeAt}] = useList(initialPlayers);\n\n    const [modal, setModal] = useState({open: false, index: null})\n\n\n    useDeepCompareEffect(() => {\n        console.log('update')\n        set(scoreService.calculate(players.slice()));\n    }, [players, modal]);\n\n\n    const addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            push(new Player(playerName));\n        }\n    }\n\n    const openModal = (index) => {\n        setModal({open: true, index: index})\n    }\n\n    const closeModal = () => {\n        setModal({open: false, index: null})\n    }\n\n    const saveModal = (board) => {\n        const index = modal.index;\n        const player = players[index]\n        player.board = board;\n        updateAt(index, player)\n        closeModal();\n    }\n\n    const getPoints = (player) => {\n        return player.board ? ([...player.board.values()].reduce((acc, val) => acc + val.points, 0)) : 0;\n    }\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return;\n        }\n\n        set(reorder(players.slice(), result.source.index, result.destination.index));\n    }\n\n    const dropdownMenu = (index) => {\n        return (\n            <>\n                <Dropdown.Item eventKey=\"1\" as=\"button\" onClick={() => openModal(index)}>\n                    Add/Edit Scoreboard\n                </Dropdown.Item>\n                <Dropdown.Divider/>\n                <Dropdown.Item eventKey=\"2\" as=\"button\" onClick={() => removeAt(index)}>\n                    Delete Player\n                </Dropdown.Item>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <h1 className=\"m-3\">7-Wonders</h1>\n            <Container>\n                <DragDrop onDragEnd={onDragEnd}>\n                    {players.map((player, index) => (\n                        <DragDrop.Drag key={index} name={player.name} index={index}>\n                            <PlayerCard key={index} name={player.name}\n                                        points={getPoints(player)}\n                                        menu={dropdownMenu(index)}>\n                                {player.board && <PlayerScoreboard board={player.board}/>}\n                            </PlayerCard>\n                        </DragDrop.Drag>\n                    ))}\n                </DragDrop>\n                <AddPlayerCard onClick={addPlayer}/>\n            </Container>\n            {modal.index !== null\n            && <CardBuilder show={modal.open}\n                            handleClose={closeModal}\n                            handleSave={saveModal}\n                            board={players[modal.index].board}/>\n            }\n        </>\n    )\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}