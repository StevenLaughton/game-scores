{"version":3,"sources":["Components/player-card.jsx","Models/card.model.js","Models/player.model.js","Models/scientific-structure-types.enum.js","Helpers/array.helper.js","Services/score.service.js","Components/add-player-card.jsx","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Cards/commerce.cards.js","Cards/misc.cards.js","Helpers/card.helper.js","Cards/guild.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Components/player-scoreboard.jsx","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","useState","open","setOpen","bg","border","className","Header","icon","faUserCircle","onClick","name","Dropdown","Toggle","size","variant","Menu","menu","Collapse","in","Body","children","Footer","points","Card","this","constructor","Error","Player","scientificStructureTypes","cog","compass","tablet","sum","arr","reduce","acc","val","nextItem","index","length","prevItem","calculateScientificStructures","cards","byType","Counter","card","item","type","Object","values","map","scienceType","Math","pow","get","min","quantity","sumOfCardActionTimesQuantity","action","scoreService","players","forEach","player","board","boardItem","key","floor","set","calculateScore","iter","x","add","multiplier","Map","AddPlayerCard","faPlusCircle","Silver","Gold","BattleWins","BattleLosses","GizaPhaseOne","GizaPhaseTwo","GizaPhaseThree","Pawnshop","Baths","Altar","Theater","Scriptorium","Workshop","Apothecary","Marketplace","Vineyard","errorMessage","Brown","Grey","Red","numberOfMiscCards","count","numberOfBrownCards","numberOfGreyCards","numberOfRedCards","numberOfBattleLosses","filter","numberOfCards","WorkersGuild","CraftsmensGuild","TradersGuild","PhilosophersGuild","SpiesGuild","StrategistsGuild","ShipownersGuild","MagistratesGuild","BuildersGuild","getBoard","boardMap","boardService","QuantitySelector","max","Number","MAX_VALUE","value","setValue","setQuantityInternal","onChange","readOnly","CardBuilder","setBoard","Modal","show","onHide","handleClose","closeButton","Title","Accordion","keys","boardItemKey","boardIndex","Item","eventKey","ListGroup","cardIndex","state","update","Button","handleSave","PlayerScoreboard","Badge","pill","SevenWonders","addPlayer","playerName","prompt","setState","$push","updatePlayer","statePlayers","slice","calculateScores","removePlayer","$splice","openModal","modalOpen","modalIndex","closeModal","saveModal","getPoints","dropdownMenu","as","console","log","Container","Row","Col","xs","sm","md","bind","React","Component","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","aria-controls","id","Nav","route","Link","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd0d1920.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Collapse, Dropdown } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from \"@fortawesome/free-solid-svg-icons/faUserCircle\";\n\nexport default function PlayerCard(props) {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <Card bg='light' border=\"light\" className=\"app-card\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <FontAwesomeIcon icon={faUserCircle} className=\"mx-1\" onClick={() => setOpen(!open)}/>\n                    <span>{props.name}</span>\n                    <div className='flex-grow-1'/>\n                    <Dropdown>\n                        <Dropdown.Toggle size=\"sm\" variant=\"secondary\"/>\n                        <Dropdown.Menu>\n                            {props.menu}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body className=\"p-0\">\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end\">\n                <span className='mx-2'>Total: {props.points}</span>\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","export class Card {\n    constructor() {\n        if (this.constructor === Card) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n    }\n\n    name: string;\n    action() {\n        throw new Error(\"Method must be implemented.\")\n    };\n}\n\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","export const scientificStructureTypes = {\n    cog: 'Cog',\n    compass: 'Compass',\n    tablet: 'Tablet',\n}\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { scientificStructureTypes } from \"../Models/scientific-structure-types.enum\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                case 'guild':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n            player.board.set(key, {\n                points: points,\n                cards: boardItem.cards\n            })\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: []) => {\n    const byType = new Counter(cards, card => card.item.type);\n    const identicalSymbolPoints = sum(Object.values(scientificStructureTypes).map(scienceType => Math.pow(byType.get(scienceType), 2)));\n\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.quantity === 0 ? 0 : card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n\nclass Counter extends Map {\n    constructor(iter, key = null) {\n        super();\n        this.key = key || (x => x);\n        for (let x of iter) {\n            this.add(x, x.quantity);\n        }\n    }\n\n    add(x, multiplier) {\n        x = this.key(x);\n        this.set(x, (((this.get(x) || 0)) + 1) * multiplier);\n    }\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class GizaPhaseOne implements Card {\n    name = 'Giza Phase 1';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class GizaPhaseTwo implements Card {\n    name = 'Giza Phase 2';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class GizaPhaseThree implements Card {\n    name = 'Giza Phase 3';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseOne implements Card {\n    name = 'Phase 1';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseTwo implements Card {\n    name = 'Phase 2';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class AlexandraPhaseThree implements Card {\n    name = 'Phase 3';\n\n    action() {\n        return 1;\n    };\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Pawnshop implements Card {\n    name = 'Pawnshop';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class Baths implements Card {\n    name = 'Baths';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class Altar implements Card {\n    name = 'Altar';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class Theater implements Card {\n    name = 'Theater';\n\n    action() {\n        return 2;\n    }\n}\n\n\n// const civicCards = {\n//     Pawnshop,\n//     Baths,\n//     Altar,\n//     Theater\n// };\n\n\n","import { Card } from \"../Models/card.model\";\nimport { scientificStructureTypes } from \"../Models/scientific-structure-types.enum\";\n\nexport class Scriptorium implements Card {\n    name = 'Scriptorium';\n    type = scientificStructureTypes.tablet;\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Workshop implements Card {\n    name = 'Workshop';\n    type = scientificStructureTypes.cog;\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Apothecary implements Card {\n    name = 'Apothecary';\n    type = scientificStructureTypes.compass;\n\n    action() {\n        return 1;\n    };\n}\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Marketplace implements Card {\n    name = 'Marketplace';\n\n    action() {\n        return 0;\n    };\n}\n\nexport class Vineyard implements Card {\n    name = 'Vineyard';\n\n    action() {\n        return 0;\n    }\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'misc cards do not play an action';\n\nexport class Brown implements Card {\n    name = 'Raw Materials'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\nexport class Grey implements Card {\n    name = 'Manufactured Goods'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\nexport class Red implements Card {\n    name = 'Military Structures'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n","import Player from \"../Models/player.model\";\n\nconst numberOfMiscCards = (player, type) => {\n    let count = 0;\n    player?.board.get('misc').cards.forEach(card => {\n        if (card.item.name === type) {\n            count = card.quantity\n        }\n    })\n    return count;\n}\nexport const numberOfBrownCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Raw Materials');\n}\n\nexport const numberOfGreyCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Manufactured Goods');\n}\n\nexport const numberOfRedCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Military Structures');\n}\n\nexport const numberOfBattleLosses = (player: Player) => {\n    return player?.board.get('military').cards.filter(card => card.item.name === 'Battle Losses' && card.quantity > 0)?.length ?? 0\n}\n\nexport const numberOfCards = (player: Player, type: string) => {\n    return player?.board.get(type).cards.filter(card => card.quantity > 0)?.length ?? 0\n}\n\n","import { Card } from \"../Models/card.model\";\nimport { nextItem, prevItem } from \"../Helpers/array.helper\";\nimport {\n    numberOfBattleLosses,\n    numberOfBrownCards,\n    numberOfCards,\n    numberOfGreyCards,\n    numberOfRedCards\n} from \"../Helpers/card.helper\";\n\nexport class WorkersGuild extends Card {\n    name = 'Workers Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(prevItem(props.players, props.index))\n            + numberOfBrownCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class CraftsmensGuild extends Card {\n    name = 'Craftsmens Guild'\n\n    action = (props) => {\n        return (numberOfGreyCards(prevItem(props.players, props.index)) * 2)\n            + (numberOfGreyCards(nextItem(props.players, props.index)) * 2);\n    }\n}\n\nexport class TradersGuild extends Card {\n    name = 'Traders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'commerce')\n            + numberOfCards(nextItem(props.players, props.index), 'commerce');\n    }\n}\n\nexport class PhilosophersGuild extends Card {\n    name = 'Philosophers Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'science')\n            + numberOfCards(nextItem(props.players, props.index), 'science');\n    }\n}\n\nexport class SpiesGuild extends Card {\n    name = 'Spies Guild'\n\n    action = (props) => {\n        return numberOfRedCards(prevItem(props.players, props.index))\n            + numberOfRedCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class StrategistsGuild extends Card {\n    name = 'Strategists Guild'\n\n    action = (props) => {\n        return numberOfBattleLosses(prevItem(props.players, props.index))\n            + numberOfBattleLosses(nextItem(props.players, props.index));\n    }\n}\n\nexport class ShipownersGuild extends Card {\n    name = 'Shipowners Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index])\n            + numberOfGreyCards(props.players[props.index])\n            + numberOfCards(props.players[props.index], 'guild');\n    }\n}\n\nexport class MagistratesGuild extends Card {\n    name = 'Magistrates Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'civic')\n            + numberOfCards(nextItem(props.players, props.index), 'civic');\n    }\n}\n\nexport class BuildersGuild extends Card {\n    name = 'Builders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'wonders')\n            + numberOfCards(props.players[props.index], 'wonders')\n            + numberOfCards(nextItem(props.players, props.index), 'wonders');\n    }\n}\n\nexport default function getGuildsMap(board) {\n    board.set('guild', {\n        points: 0,\n        cards: [\n            {\n                item: new WorkersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new CraftsmensGuild(),\n                quantity: 0,\n            },\n            {\n                item: new TradersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new PhilosophersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new SpiesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new StrategistsGuild(),\n                quantity: 0,\n            },\n            {\n                item: new ShipownersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new MagistratesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new BuildersGuild(),\n                quantity: 0,\n            },\n        ]\n    });\n}\n","import { Gold, Silver } from \"../Cards/money.cards\";\nimport { BattleLosses, BattleWins } from \"../Cards/military.cards\";\nimport { GizaPhaseOne, GizaPhaseThree, GizaPhaseTwo } from \"../Cards/wonders.cards\";\nimport { Altar, Baths, Pawnshop, Theater } from \"../Cards/civic.cards\";\nimport { Apothecary, Scriptorium, Workshop } from \"../Cards/science.cards\";\nimport { Marketplace, Vineyard } from \"../Cards/commerce.cards\";\nimport { Brown, Grey, Red } from \"../Cards/misc.cards\";\nimport getGuildsMap from \"../Cards/guild.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    boardMap.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0\n            }\n        ]\n    })\n    boardMap.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            }\n        ]\n    });\n    boardMap.set('wonders', {\n        points: 0,\n        cards: [\n            {\n                item: new GizaPhaseOne(),\n                quantity: 0,\n            },\n            {\n                item: new GizaPhaseTwo(),\n                quantity: 0,\n            },\n            {\n                item: new GizaPhaseThree(),\n                quantity: 0,\n            }\n        ]\n    });\n    boardMap.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new Pawnshop(),\n                quantity: 0,\n            },\n            {\n                item: new Baths(),\n                quantity: 0,\n            },\n            {\n                item: new Altar(),\n                quantity: 0,\n            },\n            {\n                item: new Theater(),\n                quantity: 0,\n            },\n\n        ]\n    },);\n    boardMap.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Scriptorium(),\n                quantity: 0,\n            },\n            {\n                item: new Workshop(),\n                quantity: 0,\n            },\n            {\n                item: new Apothecary(),\n                quantity: 0,\n            }\n        ]\n    },);\n    boardMap.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Vineyard(),\n                quantity: 0,\n            },\n            {\n                item: new Marketplace(),\n                quantity: 0,\n            },\n        ]\n    });\n    getGuildsMap(boardMap)\n    boardMap.set('misc', {\n        points: 0,\n        cards: [\n            {\n                item: new Brown(),\n                quantity: 0,\n            },\n            {\n                item: new Grey(),\n                quantity: 0,\n            },\n            {\n                item: new Red(),\n                quantity: 0,\n            },\n        ]\n    });\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","import { useState } from \"react\";\n\nexport default function QuantitySelector(props) {\n    const min = props?.min ?? 0;\n    const max = props?.max ?? Number.MAX_VALUE;\n\n    const [value, setValue] = useState(props.value);\n\n    const decrement = () => {\n        if (value > min) {\n            setQuantityInternal(value - 1)\n        }\n    }\n\n    const increment = () => {\n        if (value < max) {\n            setQuantityInternal(value + 1)\n        }\n    }\n\n\n    const setQuantityInternal = (value) => {\n        props.onChange(value);\n        setValue(value);\n    }\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={decrement}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={value} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={increment}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, ListGroup, Modal } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\n\nexport default function CardBuilder(props) {\n    const [board, setBoard] = useState(props.board ?? boardService.get())\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        setBoard(state => new Map(state).set(boardItemKey, map))\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Scoreboard Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"p-0\">\n                <Accordion>\n\n                    {[...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {\n                                            board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                                <ListGroup.Item key={cardIndex} className='d-flex'>\n                                                    {card.item.name}\n                                                    <div className='flex-grow-1'/>\n                                                    {\n                                                        <QuantitySelector\n                                                            value={card.quantity}\n                                                            onChange={quantity => update(quantity, boardItemKey, cardIndex)}>\n                                                        </QuantitySelector>\n                                                    }\n                                                </ListGroup.Item>\n                                            ))}\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        )\n                    )}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() => props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { Accordion, Badge, ListGroup } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport default function PlayerScoreboard(props) {\n\n    return (\n        <Accordion>\n            {[...props.board.keys()].map((boardItemKey, boardIndex) => (\n                    <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                        <Accordion.Header>\n                            <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(boardItemKey).points}</Badge>\n                            {boardItemKey}\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <ListGroup variant=\"flush\">\n                                {props.board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                    <ListGroup.Item key={cardIndex} className='d-flex'>\n                                        {card.item.name}\n                                        <div className='flex-grow-1'/>\n                                        <span>{card.quantity}</span>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )\n            )}\n        </Accordion>\n    )\n}\n","import { Col, Container, Dropdown, Row } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport Player from \"../Models/player.model\";\nimport { scoreService } from \"../Services/score.service\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport CardBuilder from \"../Components/card-builder\";\nimport PlayerScoreboard from \"../Components/player-scoreboard\";\n\nexport default class SevenWonders extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [\n                new Player('steven'),\n                new Player('charlotte'),\n            ],\n            modalOpen: false,\n            modalIndex: null\n        };\n    }\n\n    componentDid() {\n        console.log('did mount')\n    }\n\n    addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            this.setState((state) => ({\n                players: update(state.players, {$push: [new Player(playerName),]})\n            }));\n        }\n    }\n\n    updatePlayer = (player, index) => {\n        const statePlayers = this.state.players.slice();\n        statePlayers[index] = player;\n        this.setState({players: statePlayers}, () => this.calculateScores());\n    }\n\n    removePlayer = (index) => {\n        this.setState((state) => update(state, {players: {$splice: [[index, 1]]}}));\n    };\n\n    calculateScores = () => {\n        this.setState({players: scoreService.calculate(this.state.players.slice())});\n    };\n\n    openModal = (index) => {\n        this.setState({modalOpen: true, modalIndex: index})\n\n    }\n\n    closeModal = () => {\n        this.setState({modalOpen: false, modalIndex: null})\n    }\n\n    saveModal = (board) => {\n        const index = this.state.modalIndex;\n        const player = this.state.players[index]\n        player.board = board;\n        this.updatePlayer(player, index);\n        this.closeModal();\n    }\n\n    getPoints = (player) => {\n        return player.board ? ([...player.board.values()].reduce((acc, val) => acc + val.points, 0)) : 0;\n    }\n\n    dropdownMenu = (index) => {\n        return (\n            <>\n                <Dropdown.Item as=\"button\" onClick={() => this.openModal(index)}>\n                    Add/Edit Scoreboard\n                </Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={() => this.removePlayer(index)}>\n                    Delete Player\n                </Dropdown.Item>\n            </>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"m-3\">7-Wonders</h1>\n                <Container>\n                    <Row>\n                        {this.state.players.map((player, index) => (\n                            <Col xs={12} sm={6} key={index}>\n                                <PlayerCard name={player.name}\n                                            points={this.getPoints(player)}\n                                            menu={this.dropdownMenu(index)}>\n                                    {player.board && <PlayerScoreboard board={player.board}/>}\n                                </PlayerCard>\n                            </Col>\n                        ))}\n                        <Col xs={12} md={6}>\n                            <AddPlayerCard onClick={this.addPlayer}/>\n                        </Col>\n                    </Row>\n                </Container>\n                {this.state.modalIndex !== null\n                && <CardBuilder show={this.state.modalOpen}\n                                handleClose={this.closeModal}\n                                handleSave={this.saveModal.bind(this)}\n                                board={this.state.players[this.state.modalIndex].board}/>\n                }\n            </div>\n        )\n    }\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}