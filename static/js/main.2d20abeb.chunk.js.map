{"version":3,"sources":["Components/player-card.jsx","Models/card.model.js","Models/player.model.js","Helpers/array.helper.js","Services/score.service.js","Components/add-player-card.jsx","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Helpers/card.helper.js","Cards/commerce.cards.js","Cards/misc.cards.js","Cards/guild.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Hooks/map.hook.js","Components/player-scoreboard.jsx","Components/shared/drag-drop.jsx","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","useState","open","setOpen","bg","border","Header","className","Dropdown","Toggle","size","Menu","menu","name","icon","faChevronLeft","onClick","Collapse","in","Body","children","Footer","points","Card","this","constructor","Error","Player","sum","arr","reduce","acc","val","nextItem","index","length","prevItem","calculateScientificStructures","cards","map","card","Math","pow","quantity","min","sumOfCardActionTimesQuantity","item","action","scoreService","players","forEach","player","board","boardItem","key","floor","set","Object","assign","calculateScore","AddPlayerCard","faPlusCircle","Silver","Gold","BattleWins","BattleLosses","Wonder","wonder","getWonder","side","current","get","sideA","option","wonders","Rhodes","Giza","Alexandria","Ephesus","Babylon","Olympia","Halicarnassus","TwoPoint","ThreePoint","FourPoint","FivePoint","SixPoint","SevenPoint","EightPoint","Tablet","Cog","Compass","numberOfMiscCards","type","count","numberOfBrownCards","numberOfGreyCards","numberOfRedCards","numberOfBattleLosses","filter","numberOfCards","Haven","Lighthouse","ChamberOfCommerce","YellowOther","errorMessage","Brown","Grey","Red","WorkersGuild","CraftsmensGuild","TradersGuild","PhilosophersGuild","SpiesGuild","StrategistsGuild","ShipownersGuild","MagistratesGuild","BuildersGuild","getBoard","boardMap","Map","getMilitaryMap","getMoneyMap","getCivicMap","getScienceMap","getCommerceMap","getGuildsMap","getMiscMap","boardService","QuantitySelector","max","Number","MAX_VALUE","useCounter","value","inc","dec","useEffect","onChange","readOnly","CardBuilder","initialSet","state","setState","prev","clone","unset","delete","clear","useMap","update","boardItemKey","cardIndex","WonderPicker","Row","options","entries","label","isSearchable","defaultChecked","icons","target","checked","Form","Check","inline","Modal","show","onHide","handleClose","closeButton","Title","Accordion","keys","boardIndex","Item","eventKey","ListGroup","variant","Button","handleSave","PlayerScoreboard","Badge","pill","DragDrop","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","placeholder","Drag","draggableId","snapshot","draggableProps","dragHandleProps","style","isDragging","draggableStyle","userSelect","SevenWonders","addPlayer","playerName","prompt","$push","updatePlayer","statePlayers","slice","calculateScores","removePlayer","$splice","openModal","modalOpen","modalIndex","closeModal","saveModal","getPoints","values","dropdownMenu","as","Divider","bind","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","Container","React","Component","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","aria-controls","id","Nav","route","Link","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d20abeb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Collapse, Dropdown } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function PlayerCard(props) {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <Card bg='light' border=\"light\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <Dropdown className='mx-1'>\n                        <Dropdown.Toggle size=\"sm\" />\n                        <Dropdown.Menu>\n                            {props.menu}\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <span>{props.name}</span>\n                    <div className='flex-grow-1'/>\n                    <div className={open ? \"isRotated\" : \"\"}>\n                        <FontAwesomeIcon icon={faChevronLeft}\n                                         className=\"mx-1\"\n                                         onClick={() => setOpen(!open)}/>\n                    </div>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body className=\"p-0\">\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end\">\n                <span className='mx-2'>Total: {props.points}</span>\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","export class Card {\n    constructor() {\n        if (this.constructor === Card) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n    }\n\n    name: string;\n    action() {\n        throw new Error(\"Method must be implemented.\")\n    };\n}\n\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n\nexport const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                case 'wonders':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                case 'guild':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n\n            player.board.set(key, Object.assign(boardItem, {points: points}))\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: CardWithQuantity[]) => {\n    const identicalSymbolPoints = sum(cards.map(card => Math.pow(card.quantity, 2)));\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.quantity === 0 ? 0 : card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\nexport default function getMoneyMap(board) {\n    board.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\nexport default function getMilitaryMap(board) {\n    board.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Wonder implements Card {\n    constructor(wonder: wonders, val: number) {\n        this.name = `${wonder} Phase One`\n        this.action = () => val;\n    }\n}\n\n\nexport function getWonder(board, wonder, side) {\n    let points;\n    const current = board?.get('wonders');\n    const sideA = side ?? current?.sideA ?? true\n    const option = wonder ?? current?.option ?? wonders.Rhodes;\n\n    if (sideA) {\n        points = wonder === wonders.Giza\n            ? [3, 5, 7]\n            : [3, 0, 7]\n    } else {\n        switch (option) {\n            case wonders.Rhodes:\n                points = [3, 4];\n                break;\n            case wonders.Alexandria:\n                points = [0, 0, 7];\n                break;\n            case wonders.Ephesus:\n                points = [2, 3, 5];\n                break;\n            case wonders.Babylon:\n                points = [3, 0, 0];\n                break;\n            case wonders.Olympia:\n                points = [0, 5, 0];\n                break;\n            case wonders.Halicarnassus:\n                points = [2, 1, 0];\n                break;\n            case wonders.Giza:\n                points = [3, 5, 5, 7];\n                break;\n        }\n    }\n\n    return {\n        points: 0,\n        option: option,\n        sideA: sideA,\n        cards: points.map(val => ({item: new Wonder(wonder, val), quantity: 0}))\n    };\n}\n\nexport default function getWonderMap(board) {\n    board.set('wonders', getWonder());\n}\n\nexport const wonders = {\n    Rhodes: 'Rhodes',\n    Alexandria: 'Alexandria',\n    Ephesus: 'Ephesus',\n    Babylon: 'Babylon',\n    Olympia: 'Olympia',\n    Halicarnassus: 'Halicarnassus',\n    Giza: 'Giza',\n}\n\nexport const wondersSelect = () => {\n    return Object.entries(wonders).map(wonder => ({value: wonder[0], label: wonder[1]}));\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class TwoPoint implements Card {\n    name = 'Two Victory Points';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class ThreePoint implements Card {\n    name = 'Three Victory Points';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class FourPoint implements Card {\n    name = 'Four Victory Points';\n\n    action() {\n        return 4;\n    }\n}\n\nexport class FivePoint implements Card {\n    name = 'Five Victory Points';\n\n    action() {\n        return 5;\n    }\n}\n\nexport class SixPoint implements Card {\n    name = 'Six Victory Points';\n\n    action() {\n        return 6;\n    }\n}\n\nexport class SevenPoint implements Card {\n    name = 'Seven Victory Points';\n\n    action() {\n        return 7;\n    }\n}\n\nexport class EightPoint implements Card {\n    name = 'Eight Victory Points';\n\n    action() {\n        return 8;\n    }\n}\n\n\nexport default function getCivicMap(board) {\n    board.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new TwoPoint(),\n                quantity: 0,\n            },\n            {\n                item: new ThreePoint(),\n                quantity: 0,\n            },\n            {\n                item: new FourPoint(),\n                quantity: 0,\n            },\n            {\n                item: new FivePoint(),\n                quantity: 0,\n            },\n            {\n                item: new SixPoint(),\n                quantity: 0,\n            },\n            {\n                item: new SevenPoint(),\n                quantity: 0,\n            },\n            {\n                item: new EightPoint(),\n                quantity: 0,\n            },\n        ]\n    })\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Tablet implements Card {\n    name = 'Tablet';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Cog implements Card {\n    name = 'Cog';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Compass implements Card {\n    name = 'Compass';\n\n    action() {\n        return 1;\n    };\n}\n\nexport default function getScienceMap(board) {\n    board.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Tablet(),\n                quantity: 0,\n            },\n            {\n                item: new Cog(),\n                quantity: 0,\n            },\n            {\n                item: new Compass(),\n                quantity: 0,\n            }\n        ]\n    },);\n}\n","import Player from \"../Models/player.model\";\nimport { sum } from \"./array.helper\";\n\nconst numberOfMiscCards = (player, type) => {\n    let count = 0;\n    player.board?.get('misc').cards.forEach(card => {\n        if (card.item.name === type) {\n            count = card.quantity\n        }\n    })\n    return count;\n}\nexport const numberOfBrownCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Raw Materials');\n}\n\nexport const numberOfGreyCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Manufactured Goods');\n}\n\nexport const numberOfRedCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Military Structures');\n}\n\nexport const numberOfBattleLosses = (player: Player) => {\n    return player.board?.get('military').cards.filter(card => card.item.name === 'Battle Losses' && card.quantity > 0)?.length ?? 0\n}\n\nexport const numberOfCards = (player: Player, type: string) => {\n    return sum(player.board?.get(type).cards.map(card => card.quantity) ?? [0]);\n}\n\n","import { Card } from \"../Models/card.model\";\nimport { numberOfBrownCards, numberOfCards, numberOfGreyCards } from \"../Helpers/card.helper\";\n\n\nexport class Haven implements Card {\n    name = 'Haven';\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index]);\n    }\n}\n\nexport class Lighthouse implements Card {\n    name = 'Lighthouse';\n\n    action = (props) => {\n        return numberOfCards(props.players[props.index], 'commerce');\n    }\n}\n\nexport class ChamberOfCommerce implements Card {\n    name = 'Chamber Of Commerce';\n\n    action = (props) => {\n        return (numberOfGreyCards(props.players[props.index]) * 2);\n    }\n}\n\nexport class YellowOther implements Card {\n    name = 'Other';\n\n    action = () => {\n        return 0;\n    }\n}\n\nexport default function getCommerceMap(board) {\n    board.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Haven(),\n                quantity: 0,\n            },\n            {\n                item: new Lighthouse(),\n                quantity: 0,\n            },\n            {\n                item: new ChamberOfCommerce(),\n                quantity: 0,\n            },\n            {\n                item: new YellowOther(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'misc cards do not play an action';\n\nexport class Brown implements Card {\n    name = 'Raw Materials'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Grey implements Card {\n    name = 'Manufactured Goods'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Red implements Card {\n    name = 'Military Structures'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport default function getMiscMap(board) {\n    board.set('misc', {\n        points: 0,\n        cards: [\n            {\n                item: new Brown(),\n                quantity: 0,\n            },\n            {\n                item: new Grey(),\n                quantity: 0,\n            },\n            {\n                item: new Red(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\nimport { nextItem, prevItem } from \"../Helpers/array.helper\";\nimport {\n    numberOfBattleLosses,\n    numberOfBrownCards,\n    numberOfCards,\n    numberOfGreyCards,\n    numberOfRedCards\n} from \"../Helpers/card.helper\";\n\nexport class WorkersGuild extends Card {\n    name = 'Workers Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(prevItem(props.players, props.index))\n            + numberOfBrownCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class CraftsmensGuild extends Card {\n    name = 'Craftsmens Guild'\n\n    action = (props) => {\n        return (numberOfGreyCards(prevItem(props.players, props.index)) * 2)\n            + (numberOfGreyCards(nextItem(props.players, props.index)) * 2);\n    }\n}\n\nexport class TradersGuild extends Card {\n    name = 'Traders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'commerce')\n            + numberOfCards(nextItem(props.players, props.index), 'commerce');\n    }\n}\n\nexport class PhilosophersGuild extends Card {\n    name = 'Philosophers Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'science')\n            + numberOfCards(nextItem(props.players, props.index), 'science');\n    }\n}\n\nexport class SpiesGuild extends Card {\n    name = 'Spies Guild'\n\n    action = (props) => {\n        return numberOfRedCards(prevItem(props.players, props.index))\n            + numberOfRedCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class StrategistsGuild extends Card {\n    name = 'Strategists Guild'\n\n    action = (props) => {\n        return numberOfBattleLosses(prevItem(props.players, props.index))\n            + numberOfBattleLosses(nextItem(props.players, props.index));\n    }\n}\n\nexport class ShipownersGuild extends Card {\n    name = 'Shipowners Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index])\n            + numberOfGreyCards(props.players[props.index])\n            + numberOfCards(props.players[props.index], 'guild');\n    }\n}\n\nexport class MagistratesGuild extends Card {\n    name = 'Magistrates Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'civic')\n            + numberOfCards(nextItem(props.players, props.index), 'civic');\n    }\n}\n\nexport class BuildersGuild extends Card {\n    name = 'Builders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'wonders')\n            + numberOfCards(props.players[props.index], 'wonders')\n            + numberOfCards(nextItem(props.players, props.index), 'wonders');\n    }\n}\n\nexport default function getGuildsMap(board) {\n    board.set('guild', {\n        points: 0,\n        cards: [\n            {\n                item: new WorkersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new CraftsmensGuild(),\n                quantity: 0,\n            },\n            {\n                item: new TradersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new PhilosophersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new SpiesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new StrategistsGuild(),\n                quantity: 0,\n            },\n            {\n                item: new ShipownersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new MagistratesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new BuildersGuild(),\n                quantity: 0,\n            },\n        ]\n    });\n}\n","import getMoneyMap from \"../Cards/money.cards\";\nimport getMilitaryMap from \"../Cards/military.cards\";\nimport getWonderMap, { wonders } from \"../Cards/wonders.cards\";\nimport getCivicMap from \"../Cards/civic.cards\";\nimport getScienceMap from \"../Cards/science.cards\";\nimport getCommerceMap from \"../Cards/commerce.cards\";\nimport getMiscMap from \"../Cards/misc.cards\";\nimport getGuildsMap from \"../Cards/guild.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    getWonderMap(boardMap)\n    getMilitaryMap(boardMap)\n    getMoneyMap(boardMap)\n    getCivicMap(boardMap)\n    getScienceMap(boardMap)\n    getCommerceMap(boardMap)\n    getGuildsMap(boardMap)\n    getMiscMap(boardMap)\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","import { useCounter } from \"react-use\";\nimport { useEffect } from \"react\";\n\nexport default function QuantitySelector(props) {\n    const min = 0;\n    const max = Number.MAX_VALUE;\n    const [current, {inc, dec}] = useCounter(props.value, max, min);\n\n    useEffect(() => {\n        props.onChange(current)\n    }, [current]);\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={() => dec(1)}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={current} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={() => inc(1)}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, Form, ListGroup, Modal, Row } from \"react-bootstrap\";\nimport React from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\nimport Select from 'react-select'\nimport { getWonder, wondersSelect } from \"../Cards/wonders.cards\";\nimport useMap from \"../Hooks/map.hook\";\nimport Toggle from 'react-toggle';\n\nexport default function CardBuilder(props) {\n    const [board, {set}] = useMap(props.board ?? boardService.get())\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        set(boardItemKey, map)\n    }\n\n    const WonderPicker = () => {\n        return (\n            <>\n                <Row>\n                    <Select options={wondersSelect()}\n                            value={{label: board.get('wonders').option}}\n                            isSearchable={false}\n                            onChange={option => set('wonders', getWonder(board, option.value))}>\n                    </Select>\n                    <label>\n                        <Toggle defaultChecked={board.get('wonders').sideA}\n                                icons={false}\n                                onChange={val => set('wonders', getWonder(board, null, val.target.checked))}/>\n                        <span>Side {board.get('wonders').sideA ? 'A' : 'B'}</span>\n                    </label>\n                </Row>\n                <div className=\"my-2\">\n                    {board?.get('wonders').cards.map((card, cardIndex) => (\n                        <Form.Check key={cardIndex}\n                                    inline\n                                    label={`Phase ${cardIndex + 1}`}\n                                    checked={card.quantity === 1}\n                                    onChange={val => update(+val.target.checked, 'wonders', cardIndex)}\n                                    type='checkbox'>\n                        </Form.Check>\n                    ))}\n                </div>\n\n            </>\n        )\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Scoreboard Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"p-0\">\n                <Accordion>\n                    {\n                        [...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {(boardItemKey === 'wonders')\n                                            ? <WonderPicker/>\n                                            : board?.get(boardItemKey).cards.map((card, cardIndex) => (\n                                                <ListGroup.Item key={cardIndex} className='d-flex'>\n                                                    {card.item.name}\n                                                    <div className='flex-grow-1'/>\n                                                    <QuantitySelector\n                                                        value={card.quantity}\n                                                        onChange={quantity => update(quantity, boardItemKey, cardIndex)}>\n                                                    </QuantitySelector>\n                                                </ListGroup.Item>\n                                            ))}\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        ))}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() => props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { useState } from \"react\";\n\nexport default function useMap(initialSet) {\n    const [state, setState] = useState(new Map(initialSet))\n    const set = (key, value) => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.set(key, value)\n            return clone\n        })\n    }\n    const unset = (key) => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.delete(key)\n            return clone\n        })\n    }\n    const clear = () => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.clear()\n            return clone\n        })\n    }\n    return [state, {set, unset, clear}]\n}\n","import { Accordion, Badge, ListGroup } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport default function PlayerScoreboard(props) {\n\n    return (\n        <Accordion>\n            {[...props.board.keys()].map((boardItemKey, boardIndex) => (\n                    <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                        <Accordion.Header>\n                            <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(boardItemKey).points}</Badge>\n                            {boardItemKey}\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <ListGroup variant=\"flush\">\n                                {props.board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                    <ListGroup.Item key={cardIndex} className='d-flex'>\n                                        {card.item.name}\n                                        <div className='flex-grow-1'/>\n                                        <span>{card.quantity}</span>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )\n            )}\n        </Accordion>\n    )\n}\n","import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: \"none\",\n    ...draggableStyle\n});\n\n\nconst DragDrop = (props) => (<DragDropContext onDragEnd={props.onDragEnd}>\n    <Droppable droppableId=\"droppable\">\n        {provided => (\n            <div {...provided.droppableProps}\n                 ref={provided.innerRef}>\n                {props.children}\n                {provided.placeholder}\n            </div>)}\n    </Droppable>\n</DragDropContext>)\nconst Drag = (props) => (<Draggable key={props.name} draggableId={props.name} index={props.index}>\n    {(provided, snapshot) => (\n        <div ref={provided.innerRef}\n             {...provided.draggableProps}\n             {...provided.dragHandleProps}\n             className=\"mb-3\"\n             style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}>\n            {props.children}\n        </div>\n    )}\n</Draggable>);\n\nDragDrop.Drag = Drag;\n\nexport default DragDrop;\n\n","import { Container, Dropdown } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport Player from \"../Models/player.model\";\nimport { scoreService } from \"../Services/score.service\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport CardBuilder from \"../Components/card-builder\";\nimport PlayerScoreboard from \"../Components/player-scoreboard\";\nimport DragDrop from \"../Components/shared/drag-drop\";\nimport { reorder } from \"../Helpers/array.helper\";\n\nexport default class SevenWonders extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [\n                new Player('steven'),\n                new Player('charlotte'),\n            ],\n            modalOpen: false,\n            modalIndex: null\n        };\n\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            this.setState((state) => ({\n                players: update(state.players, {$push: [new Player(playerName),]})\n            }));\n        }\n    }\n\n    updatePlayer = (player, index) => {\n        const statePlayers = this.state.players.slice();\n        statePlayers[index] = player;\n        this.setState({players: statePlayers}, () => this.calculateScores());\n    }\n\n    removePlayer = (index) => {\n        this.setState((state) => update(state, {players: {$splice: [[index, 1]]}}));\n    };\n\n    calculateScores = () => {\n        this.setState({players: scoreService.calculate(this.state.players.slice())});\n    };\n\n    openModal = (index) => {\n        this.setState({modalOpen: true, modalIndex: index})\n\n    }\n\n    closeModal = () => {\n        this.setState({modalOpen: false, modalIndex: null})\n    }\n\n    saveModal = (board) => {\n        const index = this.state.modalIndex;\n        const player = this.state.players[index]\n        player.board = board;\n        this.updatePlayer(player, index);\n        this.closeModal();\n    }\n\n    getPoints = (player) => {\n        return player.board ? ([...player.board.values()].reduce((acc, val) => acc + val.points, 0)) : 0;\n    }\n\n    dropdownMenu = (index) => {\n        return (\n            <>\n                <Dropdown.Item eventKey=\"1\" as=\"button\" onClick={() => this.openModal(index)}>\n                    Add/Edit Scoreboard\n                </Dropdown.Item>\n                <Dropdown.Divider/>\n                <Dropdown.Item eventKey=\"2\" as=\"button\" onClick={() => this.removePlayer(index)}>\n                    Delete Player\n                </Dropdown.Item>\n            </>\n        )\n    }\n\n    onDragEnd(result) {\n        if (!result.destination) {\n            return;\n        }\n        const players = reorder(this.state.players, result.source.index, result.destination.index);\n\n        this.setState({players: players});\n    }\n\n    render() {\n        return (\n            <>\n                <h1 className=\"m-3\">7-Wonders</h1>\n                <Container>\n                    <DragDrop onDragEnd={this.onDragEnd}>\n                        {this.state.players.map((player, index) => (\n                            <DragDrop.Drag key={index} name={player.name} index={index}>\n                                <PlayerCard name={player.name}\n                                            points={this.getPoints(player)}\n                                            menu={this.dropdownMenu(index)}>\n                                    {player.board && <PlayerScoreboard board={player.board}/>}\n                                </PlayerCard>\n                            </DragDrop.Drag>\n                        ))}\n                    </DragDrop>\n                    <AddPlayerCard onClick={this.addPlayer}/>\n                </Container>\n                {this.state.modalIndex !== null\n                && <CardBuilder show={this.state.modalOpen}\n                                handleClose={this.closeModal}\n                                handleSave={this.saveModal.bind(this)}\n                                board={this.state.players[this.state.modalIndex].board}/>\n                }\n            </>\n        )\n    }\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}