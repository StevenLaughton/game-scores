{"version":3,"sources":["Components/player-card.jsx","Models/card.model.js","Models/player.model.js","Helpers/array.helper.js","Services/score.service.js","Components/add-player-card.jsx","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Helpers/card.helper.js","Cards/commerce.cards.js","Cards/misc.cards.js","Cards/guild.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Hooks/map.hook.js","Components/player-scoreboard.jsx","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","useState","open","setOpen","bg","border","className","Header","Dropdown","Toggle","size","Menu","menu","name","icon","faChevronLeft","onClick","Collapse","in","Body","children","Footer","points","Card","this","constructor","Error","Player","sum","arr","reduce","acc","val","nextItem","index","length","prevItem","calculateScientificStructures","cards","map","card","Math","pow","quantity","min","sumOfCardActionTimesQuantity","item","action","scoreService","players","forEach","player","board","boardItem","key","floor","set","Object","assign","calculateScore","AddPlayerCard","faPlusCircle","Silver","Gold","BattleWins","BattleLosses","Wonder","wonder","getWonder","wonders","Giza","option","Rhodes","Alexandria","Ephesus","Babylon","Olympia","Halicarnassus","TwoPoint","ThreePoint","FourPoint","FivePoint","SixPoint","SevenPoint","EightPoint","Tablet","Cog","Compass","numberOfMiscCards","type","count","get","numberOfBrownCards","numberOfGreyCards","numberOfRedCards","numberOfBattleLosses","filter","numberOfCards","Haven","Lighthouse","ChamberOfCommerce","YellowOther","errorMessage","Brown","Grey","Red","WorkersGuild","CraftsmensGuild","TradersGuild","PhilosophersGuild","SpiesGuild","StrategistsGuild","ShipownersGuild","MagistratesGuild","BuildersGuild","getBoard","boardMap","Map","getMilitaryMap","getMoneyMap","getCivicMap","getScienceMap","getCommerceMap","getGuildsMap","getMiscMap","boardService","QuantitySelector","max","Number","MAX_VALUE","value","setValue","setQuantityInternal","onChange","readOnly","CardBuilder","initialSet","state","setState","prev","clone","unset","delete","clear","useMap","update","boardItemKey","cardIndex","WonderPicker","options","entries","label","isSearchable","Form","Check","inline","checked","target","Modal","show","onHide","handleClose","closeButton","Title","Accordion","keys","boardIndex","Item","eventKey","ListGroup","variant","Button","handleSave","PlayerScoreboard","Badge","pill","SevenWonders","addPlayer","playerName","prompt","$push","updatePlayer","statePlayers","slice","calculateScores","removePlayer","$splice","openModal","modalOpen","modalIndex","closeModal","saveModal","getPoints","values","dropdownMenu","as","Divider","Container","Row","Col","xs","sm","md","bind","React","Component","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","aria-controls","id","Nav","route","Link","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f3fef76.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Collapse, Dropdown } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function PlayerCard(props) {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <Card bg='light' border=\"light\" className=\"app-card\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <Dropdown className='mx-1'>\n                        <Dropdown.Toggle size=\"sm\" />\n                        <Dropdown.Menu>\n                            {props.menu}\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <span>{props.name}</span>\n                    <div className='flex-grow-1'/>\n                    <div className={open ? \"isRotated\" : \"\"}>\n                        <FontAwesomeIcon icon={faChevronLeft}\n                                         className=\"mx-1\"\n                                         onClick={() => setOpen(!open)}/>\n                    </div>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body className=\"p-0\">\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end\">\n                <span className='mx-2'>Total: {props.points}</span>\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","export class Card {\n    constructor() {\n        if (this.constructor === Card) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n    }\n\n    name: string;\n    action() {\n        throw new Error(\"Method must be implemented.\")\n    };\n}\n\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                case 'wonders':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                case 'guild':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n\n            player.board.set(key, Object.assign(boardItem, {points: points}))\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: CardWithQuantity[]) => {\n    const identicalSymbolPoints = sum(cards.map(card => Math.pow(card.quantity, 2)));\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.quantity === 0 ? 0 : card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\nexport default function getMoneyMap(board) {\n    board.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\nexport default function getMilitaryMap(board) {\n    board.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Wonder implements Card {\n    constructor(wonder: wonders, val: number) {\n        this.name = `${wonder} Phase One`\n        this.action = () => val;\n    }\n}\n\n\nexport function getWonder(board, wonder) {\n\n    let points;\n\n    points = wonder === wonders.Giza\n        ? [3, 5, 7]\n        : [3, 0, 7]\n\n    return {\n        points: 0,\n        option: wonder ?? wonders.Rhodes,\n        cards: points.map(val => ({item: new Wonder(wonder, val), quantity: 0}))\n    };\n}\n\nexport default function getWonderMap(board, wonder) {\n    board.set('wonders', getWonder(board, wonder));\n}\n\nexport const wonders = {\n    Rhodes: 'Rhodes',\n    Alexandria: 'Alexandria',\n    Ephesus: 'Ephesus',\n    Babylon: 'Babylon',\n    Olympia: 'Olympia',\n    Halicarnassus: 'Halicarnassus',\n    Giza: 'Giza',\n}\n\n\nexport const wondersSelect = () => {\n    return Object.entries(wonders).map(wonder => ({value: wonder[0], label: wonder[1]}));\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class TwoPoint implements Card {\n    name = 'Two Victory Points';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class ThreePoint implements Card {\n    name = 'Three Victory Points';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class FourPoint implements Card {\n    name = 'Four Victory Points';\n\n    action() {\n        return 4;\n    }\n}\n\nexport class FivePoint implements Card {\n    name = 'Five Victory Points';\n\n    action() {\n        return 5;\n    }\n}\n\nexport class SixPoint implements Card {\n    name = 'Six Victory Points';\n\n    action() {\n        return 6;\n    }\n}\n\nexport class SevenPoint implements Card {\n    name = 'Seven Victory Points';\n\n    action() {\n        return 7;\n    }\n}\n\nexport class EightPoint implements Card {\n    name = 'Eight Victory Points';\n\n    action() {\n        return 8;\n    }\n}\n\n\nexport default function getCivicMap(board) {\n    board.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new TwoPoint(),\n                quantity: 0,\n            },\n            {\n                item: new ThreePoint(),\n                quantity: 0,\n            },\n            {\n                item: new FourPoint(),\n                quantity: 0,\n            },\n            {\n                item: new FivePoint(),\n                quantity: 0,\n            },\n            {\n                item: new SixPoint(),\n                quantity: 0,\n            },\n            {\n                item: new SevenPoint(),\n                quantity: 0,\n            },\n            {\n                item: new EightPoint(),\n                quantity: 0,\n            },\n        ]\n    })\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Tablet implements Card {\n    name = 'Tablet';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Cog implements Card {\n    name = 'Cog';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Compass implements Card {\n    name = 'Compass';\n\n    action() {\n        return 1;\n    };\n}\n\nexport default function getScienceMap(board) {\n    board.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Tablet(),\n                quantity: 0,\n            },\n            {\n                item: new Cog(),\n                quantity: 0,\n            },\n            {\n                item: new Compass(),\n                quantity: 0,\n            }\n        ]\n    },);\n}\n","import Player from \"../Models/player.model\";\nimport { sum } from \"./array.helper\";\n\nconst numberOfMiscCards = (player, type) => {\n    let count = 0;\n    player.board?.get('misc').cards.forEach(card => {\n        if (card.item.name === type) {\n            count = card.quantity\n        }\n    })\n    return count;\n}\nexport const numberOfBrownCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Raw Materials');\n}\n\nexport const numberOfGreyCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Manufactured Goods');\n}\n\nexport const numberOfRedCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Military Structures');\n}\n\nexport const numberOfBattleLosses = (player: Player) => {\n    return player.board?.get('military').cards.filter(card => card.item.name === 'Battle Losses' && card.quantity > 0)?.length ?? 0\n}\n\nexport const numberOfCards = (player: Player, type: string) => {\n    return sum(player.board?.get(type).cards.map(card => card.quantity) ?? [0]);\n}\n\n","import { Card } from \"../Models/card.model\";\nimport { numberOfBrownCards, numberOfCards, numberOfGreyCards } from \"../Helpers/card.helper\";\n\n\nexport class Haven implements Card {\n    name = 'Haven';\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index]);\n    }\n}\n\nexport class Lighthouse implements Card {\n    name = 'Lighthouse';\n\n    action = (props) => {\n        return numberOfCards(props.players[props.index], 'commerce');\n    }\n}\n\nexport class ChamberOfCommerce implements Card {\n    name = 'Chamber Of Commerce';\n\n    action = (props) => {\n        return (numberOfGreyCards(props.players[props.index]) * 2);\n    }\n}\n\nexport class YellowOther implements Card {\n    name = 'Other';\n\n    action = () => {\n        return 0;\n    }\n}\n\nexport default function getCommerceMap(board) {\n    board.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Haven(),\n                quantity: 0,\n            },\n            {\n                item: new Lighthouse(),\n                quantity: 0,\n            },\n            {\n                item: new ChamberOfCommerce(),\n                quantity: 0,\n            },\n            {\n                item: new YellowOther(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'misc cards do not play an action';\n\nexport class Brown implements Card {\n    name = 'Raw Materials'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Grey implements Card {\n    name = 'Manufactured Goods'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Red implements Card {\n    name = 'Military Structures'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport default function getMiscMap(board) {\n    board.set('misc', {\n        points: 0,\n        cards: [\n            {\n                item: new Brown(),\n                quantity: 0,\n            },\n            {\n                item: new Grey(),\n                quantity: 0,\n            },\n            {\n                item: new Red(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\nimport { nextItem, prevItem } from \"../Helpers/array.helper\";\nimport {\n    numberOfBattleLosses,\n    numberOfBrownCards,\n    numberOfCards,\n    numberOfGreyCards,\n    numberOfRedCards\n} from \"../Helpers/card.helper\";\n\nexport class WorkersGuild extends Card {\n    name = 'Workers Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(prevItem(props.players, props.index))\n            + numberOfBrownCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class CraftsmensGuild extends Card {\n    name = 'Craftsmens Guild'\n\n    action = (props) => {\n        return (numberOfGreyCards(prevItem(props.players, props.index)) * 2)\n            + (numberOfGreyCards(nextItem(props.players, props.index)) * 2);\n    }\n}\n\nexport class TradersGuild extends Card {\n    name = 'Traders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'commerce')\n            + numberOfCards(nextItem(props.players, props.index), 'commerce');\n    }\n}\n\nexport class PhilosophersGuild extends Card {\n    name = 'Philosophers Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'science')\n            + numberOfCards(nextItem(props.players, props.index), 'science');\n    }\n}\n\nexport class SpiesGuild extends Card {\n    name = 'Spies Guild'\n\n    action = (props) => {\n        return numberOfRedCards(prevItem(props.players, props.index))\n            + numberOfRedCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class StrategistsGuild extends Card {\n    name = 'Strategists Guild'\n\n    action = (props) => {\n        return numberOfBattleLosses(prevItem(props.players, props.index))\n            + numberOfBattleLosses(nextItem(props.players, props.index));\n    }\n}\n\nexport class ShipownersGuild extends Card {\n    name = 'Shipowners Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index])\n            + numberOfGreyCards(props.players[props.index])\n            + numberOfCards(props.players[props.index], 'guild');\n    }\n}\n\nexport class MagistratesGuild extends Card {\n    name = 'Magistrates Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'civic')\n            + numberOfCards(nextItem(props.players, props.index), 'civic');\n    }\n}\n\nexport class BuildersGuild extends Card {\n    name = 'Builders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'wonders')\n            + numberOfCards(props.players[props.index], 'wonders')\n            + numberOfCards(nextItem(props.players, props.index), 'wonders');\n    }\n}\n\nexport default function getGuildsMap(board) {\n    board.set('guild', {\n        points: 0,\n        cards: [\n            {\n                item: new WorkersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new CraftsmensGuild(),\n                quantity: 0,\n            },\n            {\n                item: new TradersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new PhilosophersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new SpiesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new StrategistsGuild(),\n                quantity: 0,\n            },\n            {\n                item: new ShipownersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new MagistratesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new BuildersGuild(),\n                quantity: 0,\n            },\n        ]\n    });\n}\n","import getMoneyMap from \"../Cards/money.cards\";\nimport getMilitaryMap from \"../Cards/military.cards\";\nimport getWonderMap, { wonders } from \"../Cards/wonders.cards\";\nimport getCivicMap from \"../Cards/civic.cards\";\nimport getScienceMap from \"../Cards/science.cards\";\nimport getCommerceMap from \"../Cards/commerce.cards\";\nimport getMiscMap from \"../Cards/misc.cards\";\nimport getGuildsMap from \"../Cards/guild.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    getWonderMap(boardMap, wonders.Rhodes)\n    getMilitaryMap(boardMap)\n    getMoneyMap(boardMap)\n    getCivicMap(boardMap)\n    getScienceMap(boardMap)\n    getCommerceMap(boardMap)\n    getGuildsMap(boardMap)\n    getMiscMap(boardMap)\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","import { useState } from \"react\";\n\nexport default function QuantitySelector(props) {\n    const min = props?.min ?? 0;\n    const max = props?.max ?? Number.MAX_VALUE;\n\n    const [value, setValue] = useState(props.value);\n\n    const decrement = () => {\n        if (value > min) {\n            setQuantityInternal(value - 1)\n        }\n    }\n\n    const increment = () => {\n        if (value < max) {\n            setQuantityInternal(value + 1)\n        }\n    }\n\n\n    const setQuantityInternal = (value) => {\n        props.onChange(value);\n        setValue(value);\n    }\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={decrement}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={value} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={increment}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, Form, ListGroup, Modal } from \"react-bootstrap\";\nimport React from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\nimport Select from 'react-select'\nimport { getWonder, wondersSelect } from \"../Cards/wonders.cards\";\nimport useMap from \"../Hooks/map.hook\";\n\nexport default function CardBuilder(props) {\n    const [board, {set}] = useMap(props.board ?? boardService.get())\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        set(boardItemKey, map)\n    }\n\n    const WonderPicker = () => {\n        return (\n            <>\n                <Select options={wondersSelect()}\n                        value={{label: board.get('wonders').option}}\n                        isSearchable={false}\n                        onChange={option => set('wonders', getWonder(board, option.value))}>\n                </Select>\n                <div className=\"my-2\">\n                    {board?.get('wonders').cards.map((card, cardIndex) => (\n                        <Form.Check key={cardIndex}\n                                    inline\n                                    label={`Phase ${cardIndex + 1}`}\n                                    checked={card.quantity === 1}\n                                    onChange={val => update(+val.target.checked, 'wonders', cardIndex)}\n                                    type='checkbox'>\n                        </Form.Check>\n                    ))}\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Scoreboard Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"p-0\">\n                <Accordion>\n                    {\n                        [...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {(boardItemKey === 'wonders')\n                                            ? <WonderPicker/>\n                                            : board?.get(boardItemKey).cards.map((card, cardIndex) => (\n                                                <ListGroup.Item key={cardIndex} className='d-flex'>\n                                                    {card.item.name}\n                                                    <div className='flex-grow-1'/>\n                                                    <QuantitySelector\n                                                        value={card.quantity}\n                                                        onChange={quantity => update(quantity, boardItemKey, cardIndex)}>\n                                                    </QuantitySelector>\n                                                </ListGroup.Item>\n                                            ))}\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        ))}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() => props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { useState } from \"react\";\n\nexport default function useMap(initialSet) {\n    const [state, setState] = useState(new Map(initialSet))\n    const set = (key, value) => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.set(key, value)\n            return clone\n        })\n    }\n    const unset = (key) => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.delete(key)\n            return clone\n        })\n    }\n    const clear = () => {\n        setState((prev) => {\n            const clone = new Map(prev)\n            clone.clear()\n            return clone\n        })\n    }\n    return [state, {set, unset, clear}]\n}\n","import { Accordion, Badge, ListGroup } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport default function PlayerScoreboard(props) {\n\n    return (\n        <Accordion>\n            {[...props.board.keys()].map((boardItemKey, boardIndex) => (\n                    <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                        <Accordion.Header>\n                            <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(boardItemKey).points}</Badge>\n                            {boardItemKey}\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <ListGroup variant=\"flush\">\n                                {props.board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                    <ListGroup.Item key={cardIndex} className='d-flex'>\n                                        {card.item.name}\n                                        <div className='flex-grow-1'/>\n                                        <span>{card.quantity}</span>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )\n            )}\n        </Accordion>\n    )\n}\n","import { Col, Container, Dropdown, Row } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport Player from \"../Models/player.model\";\nimport { scoreService } from \"../Services/score.service\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport CardBuilder from \"../Components/card-builder\";\nimport PlayerScoreboard from \"../Components/player-scoreboard\";\n\nexport default class SevenWonders extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [\n                new Player('steven'),\n                new Player('charlotte'),\n            ],\n            modalOpen: false,\n            modalIndex: null\n        };\n    }\n\n    addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            this.setState((state) => ({\n                players: update(state.players, {$push: [new Player(playerName),]})\n            }));\n        }\n    }\n\n    updatePlayer = (player, index) => {\n        const statePlayers = this.state.players.slice();\n        statePlayers[index] = player;\n        this.setState({players: statePlayers}, () => this.calculateScores());\n    }\n\n    removePlayer = (index) => {\n        this.setState((state) => update(state, {players: {$splice: [[index, 1]]}}));\n    };\n\n    calculateScores = () => {\n        this.setState({players: scoreService.calculate(this.state.players.slice())});\n    };\n\n    openModal = (index) => {\n        this.setState({modalOpen: true, modalIndex: index})\n\n    }\n\n    closeModal = () => {\n        this.setState({modalOpen: false, modalIndex: null})\n    }\n\n    saveModal = (board) => {\n        const index = this.state.modalIndex;\n        const player = this.state.players[index]\n        player.board = board;\n        this.updatePlayer(player, index);\n        this.closeModal();\n    }\n\n    getPoints = (player) => {\n        return player.board ? ([...player.board.values()].reduce((acc, val) => acc + val.points, 0)) : 0;\n    }\n\n    dropdownMenu = (index) => {\n        return (\n            <>\n                <Dropdown.Item eventKey=\"1\" as=\"button\" onClick={() => this.openModal(index)}>\n                    Add/Edit Scoreboard\n                </Dropdown.Item>\n                <Dropdown.Divider/>\n                <Dropdown.Item eventKey=\"2\" as=\"button\" onClick={() => this.removePlayer(index)}>\n                    Delete Player\n                </Dropdown.Item>\n            </>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"m-3\">7-Wonders</h1>\n                <Container>\n                    <Row>\n                        {this.state.players.map((player, index) => (\n                            <Col xs={12} sm={6} key={index}>\n                                <PlayerCard name={player.name}\n                                            points={this.getPoints(player)}\n                                            menu={this.dropdownMenu(index)}>\n                                    {player.board && <PlayerScoreboard board={player.board}/>}\n                                </PlayerCard>\n                            </Col>\n                        ))}\n                        <Col xs={12} md={6}>\n                            <AddPlayerCard onClick={this.addPlayer}/>\n                        </Col>\n                    </Row>\n                </Container>\n                {this.state.modalIndex !== null\n                && <CardBuilder show={this.state.modalOpen}\n                                handleClose={this.closeModal}\n                                handleSave={this.saveModal.bind(this)}\n                                board={this.state.players[this.state.modalIndex].board}/>\n                }\n            </div>\n        )\n    }\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}