{"version":3,"sources":["Components/player-card.jsx","Models/card.model.js","Models/player.model.js","Helpers/array.helper.js","Services/score.service.js","Components/add-player-card.jsx","Cards/money.cards.js","Cards/military.cards.js","Cards/wonders.cards.js","Cards/civic.cards.js","Cards/science.cards.js","Helpers/card.helper.js","Cards/commerce.cards.js","Cards/misc.cards.js","Cards/guild.cards.js","Services/board.service.js","Components/shared/quantity-selector.jsx","Components/card-builder.jsx","Components/player-scoreboard.jsx","Views/seven-wonders.jsx","routes.js","Components/navbar.jsx","App.js","index.js"],"names":["PlayerCard","props","useState","open","setOpen","bg","border","className","Header","icon","faUserCircle","onClick","name","Dropdown","Toggle","size","variant","Menu","menu","Collapse","in","Body","children","Footer","points","Card","this","constructor","Error","Player","sum","arr","reduce","acc","val","nextItem","index","length","prevItem","calculateScientificStructures","cards","map","card","Math","pow","quantity","min","sumOfCardActionTimesQuantity","item","action","scoreService","players","forEach","player","board","boardItem","key","floor","set","calculateScore","AddPlayerCard","faPlusCircle","Silver","Gold","BattleWins","BattleLosses","APhaseOne","wonder","APhaseTwo","APhaseThree","getWonderMap","wonders","Rhodes","Alexandria","Ephesus","Babylon","Olympia","Halicarnassus","Giza","TwoPoint","ThreePoint","FourPoint","FivePoint","SixPoint","SevenPoint","EightPoint","Tablet","Cog","Compass","numberOfMiscCards","type","count","get","numberOfBrownCards","numberOfGreyCards","numberOfRedCards","numberOfBattleLosses","filter","numberOfCards","Haven","Lighthouse","ChamberOfCommerce","YellowOther","errorMessage","Brown","Grey","Red","WorkersGuild","CraftsmensGuild","TradersGuild","PhilosophersGuild","SpiesGuild","StrategistsGuild","ShipownersGuild","MagistratesGuild","BuildersGuild","getBoard","boardMap","Map","getMoneyMap","getCivicMap","getScienceMap","getCommerceMap","getGuildsMap","getMiscMap","boardService","QuantitySelector","max","Number","MAX_VALUE","value","setValue","setQuantityInternal","onChange","readOnly","CardBuilder","setBoard","WonderPicker","options","Object","entries","label","option","state","Modal","show","onHide","handleClose","closeButton","Title","Accordion","keys","boardItemKey","boardIndex","Item","eventKey","ListGroup","cardIndex","update","Button","handleSave","PlayerScoreboard","Badge","pill","SevenWonders","addPlayer","playerName","prompt","setState","$push","updatePlayer","statePlayers","slice","calculateScores","removePlayer","$splice","openModal","modalOpen","modalIndex","closeModal","saveModal","getPoints","values","dropdownMenu","as","Container","Row","Col","xs","sm","md","bind","React","Component","Routes","path","exact","main","AppNavbar","Navbar","collapseOnSelect","expand","Brand","aria-controls","id","Nav","route","Link","to","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3caeaa7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Collapse, Dropdown } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from \"@fortawesome/free-solid-svg-icons/faUserCircle\";\n\nexport default function PlayerCard(props) {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <Card bg='light' border=\"light\" className=\"app-card\">\n            <Card.Header>\n                <div className='d-flex align-items-center'>\n                    <FontAwesomeIcon icon={faUserCircle} className=\"mx-1\" onClick={() => setOpen(!open)}/>\n                    <span>{props.name}</span>\n                    <div className='flex-grow-1'/>\n                    <Dropdown>\n                        <Dropdown.Toggle size=\"sm\" variant=\"secondary\"/>\n                        <Dropdown.Menu>\n                            {props.menu}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <Card.Body className=\"p-0\">\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n            <Card.Footer className=\"text-muted text-end\">\n                <span className='mx-2'>Total: {props.points}</span>\n            </Card.Footer>\n        </Card>\n    )\n}\n\n","export class Card {\n    constructor() {\n        if (this.constructor === Card) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n    }\n\n    name: string;\n    action() {\n        throw new Error(\"Method must be implemented.\")\n    };\n}\n\n","import BoardItem from \"./board-item.model\";\n\nexport default class Player {\n    name: string;\n    board: Map<string, BoardItem>;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\n\n\n\n\n","export const sum = (arr: []) => arr.reduce((acc, val) => acc + val, 0);\n\nexport const nextItem = (arr: [], index: number) => {\n    return arr.length === index + 1\n        ? arr[0]\n        : arr[index + 1]\n}\n\nexport const prevItem = (arr: [], index: number) => {\n    return index === 0\n        ? arr[arr.length - 1]\n        : arr[index - 1]\n}\n","import Player from \"../Models/player.model\";\nimport { CardWithQuantity } from \"../Models/card-with-quantity.model\";\nimport { sum } from \"../Helpers/array.helper\";\n\nconst calculateScore = (props: Player[]) => {\n    const players = props;\n\n    players.forEach((player, index) => {\n        player.board && player.board.forEach((boardItem, key) => {\n            let points = 0;\n            switch (key) {\n                case 'military':\n                case 'civic':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards);\n                    break;\n                case 'money':\n                    points = Math.floor(sumOfCardActionTimesQuantity(boardItem.cards) / 3);\n                    break;\n                case 'science':\n                    points = calculateScientificStructures(boardItem.cards);\n                    break;\n                case 'commerce':\n                case 'guild':\n                    points = sumOfCardActionTimesQuantity(boardItem.cards, {players: players, index: index});\n                    break;\n                default:\n            }\n            player.board.set(key, {\n                points: points,\n                cards: boardItem.cards\n            })\n        })\n    });\n\n    return players;\n}\n\n\nconst calculateScientificStructures = (cards: CardWithQuantity[]) => {\n    const identicalSymbolPoints = sum(cards.map(card => Math.pow(card.quantity, 2)));\n    const bonusCardPoints = Math.min(...cards.map(card => card.quantity)) * 7;\n\n    return identicalSymbolPoints + bonusCardPoints;\n}\n\n\nconst sumOfCardActionTimesQuantity = (cards: CardWithQuantity[], props = null) =>\n    sum(cards.map(card => card.quantity === 0 ? 0 : card.item.action(props) * card.quantity));\n\nexport const scoreService = {\n    calculate: (players: Player[]) => calculateScore(players)\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function AddPlayerCard(props) {\n\n    return (\n        <Card\n            onClick={props.onClick}\n            bg='secondary'\n            border=\"secondary\"\n            className=\"text-center app-card\">\n            <Card.Body>\n                <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class Silver implements Card {\n    name = 'Silver';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Gold implements Card {\n    name = 'Gold';\n\n    action() {\n        return 3;\n    };\n}\n\nexport default function getMoneyMap(board) {\n    board.set('money', {\n        points: 0,\n        cards: [\n            {\n                item: new Silver(),\n                quantity: 0,\n            },\n            {\n                item: new Gold(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class BattleWins implements Card {\n    name = 'Battle Wins';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class BattleLosses implements Card {\n    name = 'Battle Losses';\n\n    action() {\n        return -1;\n    };\n}\n\n\nexport default function getMilitaryMap(board) {\n    board.set('military', {\n        points: 0,\n        cards: [\n            {\n                item: new BattleWins(),\n                quantity: 0,\n            },\n            {\n                item: new BattleLosses(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class APhaseOne implements Card {\n    constructor(wonder: wonders) {\n        this.name = `${wonder} Phase One`\n    }\n\n    action() {\n        return 3;\n    };\n}\n\nexport class APhaseTwo implements Card {\n    constructor(wonder: wonders) {\n        this.name = `${wonder} Phase Two`\n    }\n\n    action() {\n        return 0;\n    };\n}\n\nexport class APhaseThree implements Card {\n    constructor(wonder: wonders) {\n        this.name = `${wonder} Phase Three`\n    }\n\n    action() {\n        return 7;\n    };\n}\n\nexport default function getWonderMap(board, wonder) {\n    board.set('wonders', {\n        points: 0,\n        cards: [\n            {\n                item: new APhaseOne(wonder),\n                quantity: 0,\n            },\n            {\n                item: new APhaseTwo(wonder),\n                quantity: 0,\n            },\n            {\n                item: new APhaseThree(wonder),\n                quantity: 0,\n            },\n        ]\n    });\n    return board;\n}\n\nexport const wonders = {\n    Rhodes: 'Rhodes',\n    Alexandria: 'Alexandria',\n    Ephesus: 'Ephesus',\n    Babylon: 'Babylon',\n    Olympia: 'Olympia',\n    Halicarnassus: 'Halicarnassus',\n    Giza: 'Giza',\n}\n\n\nexport const wondersSelect = () => {\n    return Object.entries(wonders).map(wonder => ({value: wonder[0], label: wonder[1]}));\n}\n","import { Card } from \"../Models/card.model\";\n\nexport class TwoPoint implements Card {\n    name = 'Two Victory Points';\n\n    action() {\n        return 2;\n    }\n}\n\nexport class ThreePoint implements Card {\n    name = 'Three Victory Points';\n\n    action() {\n        return 3;\n    }\n}\n\nexport class FourPoint implements Card {\n    name = 'Four Victory Points';\n\n    action() {\n        return 4;\n    }\n}\n\nexport class FivePoint implements Card {\n    name = 'Five Victory Points';\n\n    action() {\n        return 5;\n    }\n}\n\nexport class SixPoint implements Card {\n    name = 'Six Victory Points';\n\n    action() {\n        return 6;\n    }\n}\n\nexport class SevenPoint implements Card {\n    name = 'Seven Victory Points';\n\n    action() {\n        return 7;\n    }\n}\n\nexport class EightPoint implements Card {\n    name = 'Eight Victory Points';\n\n    action() {\n        return 8;\n    }\n}\n\n\nexport default function getCivicMap(board) {\n    board.set('civic', {\n        points: 0,\n        cards: [\n            {\n                item: new TwoPoint(),\n                quantity: 0,\n            },\n            {\n                item: new ThreePoint(),\n                quantity: 0,\n            },\n            {\n                item: new FourPoint(),\n                quantity: 0,\n            },\n            {\n                item: new FivePoint(),\n                quantity: 0,\n            },\n            {\n                item: new SixPoint(),\n                quantity: 0,\n            },\n            {\n                item: new SevenPoint(),\n                quantity: 0,\n            },\n            {\n                item: new EightPoint(),\n                quantity: 0,\n            },\n        ]\n    })\n}\n\n\n","import { Card } from \"../Models/card.model\";\n\nexport class Tablet implements Card {\n    name = 'Tablet';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Cog implements Card {\n    name = 'Cog';\n\n    action() {\n        return 1;\n    };\n}\n\nexport class Compass implements Card {\n    name = 'Compass';\n\n    action() {\n        return 1;\n    };\n}\n\nexport default function getScienceMap(board) {\n    board.set('science', {\n        points: 0,\n        cards: [\n            {\n                item: new Tablet(),\n                quantity: 0,\n            },\n            {\n                item: new Cog(),\n                quantity: 0,\n            },\n            {\n                item: new Compass(),\n                quantity: 0,\n            }\n        ]\n    },);\n}\n","import Player from \"../Models/player.model\";\nimport { sum } from \"./array.helper\";\n\nconst numberOfMiscCards = (player, type) => {\n    let count = 0;\n    player.board?.get('misc').cards.forEach(card => {\n        if (card.item.name === type) {\n            count = card.quantity\n        }\n    })\n    return count;\n}\nexport const numberOfBrownCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Raw Materials');\n}\n\nexport const numberOfGreyCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Manufactured Goods');\n}\n\nexport const numberOfRedCards = (player: Player) => {\n    return numberOfMiscCards(player, 'Military Structures');\n}\n\nexport const numberOfBattleLosses = (player: Player) => {\n    return player.board?.get('military').cards.filter(card => card.item.name === 'Battle Losses' && card.quantity > 0)?.length ?? 0\n}\n\nexport const numberOfCards = (player: Player, type: string) => {\n    return sum(player.board?.get(type).cards.map(card => card.quantity) ?? [0]);\n}\n\n","import { Card } from \"../Models/card.model\";\nimport { numberOfBrownCards, numberOfCards, numberOfGreyCards } from \"../Helpers/card.helper\";\n\n\nexport class Haven implements Card {\n    name = 'Haven';\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index]);\n    }\n}\n\nexport class Lighthouse implements Card {\n    name = 'Lighthouse';\n\n    action = (props) => {\n        return numberOfCards(props.players[props.index], 'commerce');\n    }\n}\n\nexport class ChamberOfCommerce implements Card {\n    name = 'Chamber Of Commerce';\n\n    action = (props) => {\n        return (numberOfGreyCards(props.players[props.index]) * 2);\n    }\n}\n\nexport class YellowOther implements Card {\n    name = 'Other';\n\n    action = () => {\n        return 0;\n    }\n}\n\nexport default function getCommerceMap(board) {\n    board.set('commerce', {\n        points: 0,\n        cards: [\n            {\n                item: new Haven(),\n                quantity: 0,\n            },\n            {\n                item: new Lighthouse(),\n                quantity: 0,\n            },\n            {\n                item: new ChamberOfCommerce(),\n                quantity: 0,\n            },\n            {\n                item: new YellowOther(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\n\nconst errorMessage = 'misc cards do not play an action';\n\nexport class Brown implements Card {\n    name = 'Raw Materials'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Grey implements Card {\n    name = 'Manufactured Goods'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport class Red implements Card {\n    name = 'Military Structures'\n\n    action = () => {\n        throw new Error(errorMessage);\n    }\n}\n\nexport default function getMiscMap(board) {\n    board.set('misc', {\n        points: 0,\n        cards: [\n            {\n                item: new Brown(),\n                quantity: 0,\n            },\n            {\n                item: new Grey(),\n                quantity: 0,\n            },\n            {\n                item: new Red(),\n                quantity: 0,\n            },\n        ]\n    },);\n}\n","import { Card } from \"../Models/card.model\";\nimport { nextItem, prevItem } from \"../Helpers/array.helper\";\nimport {\n    numberOfBattleLosses,\n    numberOfBrownCards,\n    numberOfCards,\n    numberOfGreyCards,\n    numberOfRedCards\n} from \"../Helpers/card.helper\";\n\nexport class WorkersGuild extends Card {\n    name = 'Workers Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(prevItem(props.players, props.index))\n            + numberOfBrownCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class CraftsmensGuild extends Card {\n    name = 'Craftsmens Guild'\n\n    action = (props) => {\n        return (numberOfGreyCards(prevItem(props.players, props.index)) * 2)\n            + (numberOfGreyCards(nextItem(props.players, props.index)) * 2);\n    }\n}\n\nexport class TradersGuild extends Card {\n    name = 'Traders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'commerce')\n            + numberOfCards(nextItem(props.players, props.index), 'commerce');\n    }\n}\n\nexport class PhilosophersGuild extends Card {\n    name = 'Philosophers Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'science')\n            + numberOfCards(nextItem(props.players, props.index), 'science');\n    }\n}\n\nexport class SpiesGuild extends Card {\n    name = 'Spies Guild'\n\n    action = (props) => {\n        return numberOfRedCards(prevItem(props.players, props.index))\n            + numberOfRedCards(nextItem(props.players, props.index));\n    }\n}\n\nexport class StrategistsGuild extends Card {\n    name = 'Strategists Guild'\n\n    action = (props) => {\n        return numberOfBattleLosses(prevItem(props.players, props.index))\n            + numberOfBattleLosses(nextItem(props.players, props.index));\n    }\n}\n\nexport class ShipownersGuild extends Card {\n    name = 'Shipowners Guild'\n\n    action = (props) => {\n        return numberOfBrownCards(props.players[props.index])\n            + numberOfGreyCards(props.players[props.index])\n            + numberOfCards(props.players[props.index], 'guild');\n    }\n}\n\nexport class MagistratesGuild extends Card {\n    name = 'Magistrates Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'civic')\n            + numberOfCards(nextItem(props.players, props.index), 'civic');\n    }\n}\n\nexport class BuildersGuild extends Card {\n    name = 'Builders Guild'\n\n    action = (props) => {\n        return numberOfCards(prevItem(props.players, props.index), 'wonders')\n            + numberOfCards(props.players[props.index], 'wonders')\n            + numberOfCards(nextItem(props.players, props.index), 'wonders');\n    }\n}\n\nexport default function getGuildsMap(board) {\n    board.set('guild', {\n        points: 0,\n        cards: [\n            {\n                item: new WorkersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new CraftsmensGuild(),\n                quantity: 0,\n            },\n            {\n                item: new TradersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new PhilosophersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new SpiesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new StrategistsGuild(),\n                quantity: 0,\n            },\n            {\n                item: new ShipownersGuild(),\n                quantity: 0,\n            },\n            {\n                item: new MagistratesGuild(),\n                quantity: 0,\n            },\n            {\n                item: new BuildersGuild(),\n                quantity: 0,\n            },\n        ]\n    });\n}\n","import getMoneyMap from \"../Cards/money.cards\";\nimport getMilitaryMap from \"../Cards/military.cards\";\nimport getWonderMap, { wonders } from \"../Cards/wonders.cards\";\nimport getCivicMap from \"../Cards/civic.cards\";\nimport getScienceMap from \"../Cards/science.cards\";\nimport getCommerceMap from \"../Cards/commerce.cards\";\nimport getMiscMap from \"../Cards/misc.cards\";\nimport getGuildsMap from \"../Cards/guild.cards\";\n\nconst getBoard = () => {\n    const boardMap = new Map();\n    getWonderMap(boardMap, wonders.Rhodes)\n    getMilitaryMap(boardMap)\n    getMoneyMap(boardMap)\n    getCivicMap(boardMap)\n    getScienceMap(boardMap)\n    getCommerceMap(boardMap)\n    getGuildsMap(boardMap)\n    getMiscMap(boardMap)\n\n    return boardMap;\n}\n\nexport const boardService = {\n    get: () => getBoard()\n}\n","import { useState } from \"react\";\n\nexport default function QuantitySelector(props) {\n    const min = props?.min ?? 0;\n    const max = props?.max ?? Number.MAX_VALUE;\n\n    const [value, setValue] = useState(props.value);\n\n    const decrement = () => {\n        if (value > min) {\n            setQuantityInternal(value - 1)\n        }\n    }\n\n    const increment = () => {\n        if (value < max) {\n            setQuantityInternal(value + 1)\n        }\n    }\n\n\n    const setQuantityInternal = (value) => {\n        props.onChange(value);\n        setValue(value);\n    }\n\n    return (\n        <div className=\"quantity-input\">\n            <button className=\"quantity-input__modifier quantity-input__modifier--left\"\n                    type='button'\n                    onClick={decrement}>\n                &mdash;\n            </button>\n            <input className=\"quantity-input__screen\" type=\"text\" value={value} readOnly/>\n            <button className=\"quantity-input__modifier quantity-input__modifier--right\"\n                    type='button'\n                    onClick={increment}>\n                &#xff0b;\n            </button>\n        </div>\n    );\n}\n","import { Accordion, Button, ListGroup, Modal } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { boardService } from \"../Services/board.service\";\nimport QuantitySelector from \"./shared/quantity-selector\";\nimport Select from 'react-select'\nimport getWonderMap, { wonders, wondersSelect } from \"../Cards/wonders.cards\";\n\nexport default function CardBuilder(props) {\n    const [board, setBoard] = useState(props.board ?? boardService.get())\n\n\n    const update = (value, boardItemKey, cardIndex) => {\n        const map = board.get(boardItemKey);\n        map.cards[cardIndex].quantity = value;\n        setBoard(state => new Map(state).set(boardItemKey, map))\n    }\n\n\n    const WonderPicker = () => {\n        return (\n            <Select options={wondersSelect()}\n                    onChange={(option) => setBoard(state => getWonderMap(new Map(state), option.value))}/>\n        )\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Scoreboard Builder</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"p-0\">\n                <Accordion>\n\n                    {[...board.keys()].map((boardItemKey, boardIndex) => (\n                            <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                                <Accordion.Header>\n                                    {boardItemKey}\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <ListGroup variant=\"flush\">\n                                        {(boardItemKey === 'wonders') && <WonderPicker/>}\n                                        {\n                                            board?.get(boardItemKey).cards.map((card, cardIndex) => (\n                                                <ListGroup.Item key={cardIndex} className='d-flex'>\n                                                    {card.item.name}\n                                                    <div className='flex-grow-1'/>\n                                                    {\n                                                        <QuantitySelector\n                                                            value={card.quantity}\n                                                            onChange={quantity => update(quantity, boardItemKey, cardIndex)}>\n                                                        </QuantitySelector>\n                                                    }\n                                                </ListGroup.Item>\n                                            ))\n\n                                        }\n                                    </ListGroup>\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        )\n                    )}\n                </Accordion>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={() => props.handleSave(board)}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import { Accordion, Badge, ListGroup } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport default function PlayerScoreboard(props) {\n\n    return (\n        <Accordion>\n            {[...props.board.keys()].map((boardItemKey, boardIndex) => (\n                    <Accordion.Item eventKey={boardIndex} key={boardIndex}>\n                        <Accordion.Header>\n                            <Badge bg=\"success\" className=\"mx-2\" pill> {props.board.get(boardItemKey).points}</Badge>\n                            {boardItemKey}\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <ListGroup variant=\"flush\">\n                                {props.board.get(boardItemKey).cards.map((card, cardIndex) => (\n                                    <ListGroup.Item key={cardIndex} className='d-flex'>\n                                        {card.item.name}\n                                        <div className='flex-grow-1'/>\n                                        <span>{card.quantity}</span>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )\n            )}\n        </Accordion>\n    )\n}\n","import { Col, Container, Dropdown, Row } from \"react-bootstrap\";\nimport PlayerCard from \"../Components/player-card\";\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport Player from \"../Models/player.model\";\nimport { scoreService } from \"../Services/score.service\";\nimport AddPlayerCard from \"../Components/add-player-card\";\nimport CardBuilder from \"../Components/card-builder\";\nimport PlayerScoreboard from \"../Components/player-scoreboard\";\n\nexport default class SevenWonders extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [\n                new Player('steven'),\n                new Player('charlotte'),\n            ],\n            modalOpen: false,\n            modalIndex: null\n        };\n    }\n\n    addPlayer = () => {\n        const playerName = prompt(\"Please enter player name\");\n        if (playerName) {\n            this.setState((state) => ({\n                players: update(state.players, {$push: [new Player(playerName),]})\n            }));\n        }\n    }\n\n    updatePlayer = (player, index) => {\n        const statePlayers = this.state.players.slice();\n        statePlayers[index] = player;\n        this.setState({players: statePlayers}, () => this.calculateScores());\n    }\n\n    removePlayer = (index) => {\n        this.setState((state) => update(state, {players: {$splice: [[index, 1]]}}));\n    };\n\n    calculateScores = () => {\n        this.setState({players: scoreService.calculate(this.state.players.slice())});\n    };\n\n    openModal = (index) => {\n        this.setState({modalOpen: true, modalIndex: index})\n\n    }\n\n    closeModal = () => {\n        this.setState({modalOpen: false, modalIndex: null})\n    }\n\n    saveModal = (board) => {\n        const index = this.state.modalIndex;\n        const player = this.state.players[index]\n        player.board = board;\n        this.updatePlayer(player, index);\n        this.closeModal();\n    }\n\n    getPoints = (player) => {\n        return player.board ? ([...player.board.values()].reduce((acc, val) => acc + val.points, 0)) : 0;\n    }\n\n    dropdownMenu = (index) => {\n        return (\n            <>\n                <Dropdown.Item as=\"button\" onClick={() => this.openModal(index)}>\n                    Add/Edit Scoreboard\n                </Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={() => this.removePlayer(index)}>\n                    Delete Player\n                </Dropdown.Item>\n            </>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"m-3\">7-Wonders</h1>\n                <Container>\n                    <Row>\n                        {this.state.players.map((player, index) => (\n                            <Col xs={12} sm={6} key={index}>\n                                <PlayerCard name={player.name}\n                                            points={this.getPoints(player)}\n                                            menu={this.dropdownMenu(index)}>\n                                    {player.board && <PlayerScoreboard board={player.board}/>}\n                                </PlayerCard>\n                            </Col>\n                        ))}\n                        <Col xs={12} md={6}>\n                            <AddPlayerCard onClick={this.addPlayer}/>\n                        </Col>\n                    </Row>\n                </Container>\n                {this.state.modalIndex !== null\n                && <CardBuilder show={this.state.modalOpen}\n                                handleClose={this.closeModal}\n                                handleSave={this.saveModal.bind(this)}\n                                board={this.state.players[this.state.modalIndex].board}/>\n                }\n            </div>\n        )\n    }\n}\n","import SevenWonders from \"./Views/seven-wonders\";\n\nconst Routes = [\n    {\n        path: \"/\",\n        exact: true,\n        name: 'Home!',\n        main: () => <h2>Home</h2>\n    },\n    {\n        path: \"/sevenwonders\",\n        name: '7 Wonders',\n        main: () => <SevenWonders/>\n    },\n    {\n        path: \"/shoelaces\",\n        name: 'Shoelaces!',\n        main: () => <h2>Shoelaces</h2>\n    }\n];\n\nexport default Routes;\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"../routes\";\n\nexport default function AppNavbar() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand>Game Scores</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        {\n                            Routes.map((route, index) => {\n                                return (\n                                    <Nav.Link as={Link} key={index} to={route.path} href={route.path}>\n                                        {route.name}\n                                    </Nav.Link>\n                                )\n                            },)\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AppNavbar from \"./Components/navbar\";\nimport Routes from \"./routes\";\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <AppNavbar/>\n            <Switch>\n                {\n                    Routes.map((route, index) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            children={<route.main/>}\n                        />\n                    ))\n                }\n            </Switch>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}